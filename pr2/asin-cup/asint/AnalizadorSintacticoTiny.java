
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Mon Mar 03 11:20:58 CET 2025
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Mon Mar 03 11:20:58 CET 2025
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\155\000\002\002\004\000\002\002\004\000\002\003" +
    "\006\000\002\004\004\000\002\004\002\000\002\005\005" +
    "\000\002\005\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\010\005\000\002\007\004\000\002" +
    "\011\006\000\002\033\005\000\002\034\003\000\002\034" +
    "\002\000\002\035\005\000\002\035\003\000\002\036\005" +
    "\000\002\037\003\000\002\037\002\000\002\040\003\000" +
    "\002\040\003\000\002\041\003\000\002\041\003\000\002" +
    "\042\003\000\002\042\003\000\002\042\003\000\002\043" +
    "\003\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\044\006\000\002\046\006\000\002\047\005\000" +
    "\002\047\003\000\002\050\004\000\002\045\004\000\002" +
    "\012\003\000\002\012\002\000\002\013\005\000\002\013" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\015\004\000\002\016\006\000\002\020" +
    "\003\000\002\020\002\000\002\017\004\000\002\021\005" +
    "\000\002\022\004\000\002\023\004\000\002\024\003\000" +
    "\002\025\004\000\002\026\004\000\002\027\007\000\002" +
    "\031\003\000\002\031\002\000\002\032\005\000\002\032" +
    "\003\000\002\030\003\000\002\051\003\000\002\052\005" +
    "\000\002\052\003\000\002\053\005\000\002\053\003\000" +
    "\002\063\003\000\002\063\003\000\002\063\003\000\002" +
    "\063\003\000\002\063\003\000\002\063\003\000\002\054" +
    "\005\000\002\054\005\000\002\054\003\000\002\055\005" +
    "\000\002\055\005\000\002\055\003\000\002\056\005\000" +
    "\002\056\003\000\002\064\003\000\002\064\003\000\002" +
    "\064\003\000\002\057\004\000\002\057\003\000\002\065" +
    "\003\000\002\065\003\000\002\060\004\000\002\060\003" +
    "\000\002\066\005\000\002\066\004\000\002\066\003\000" +
    "\002\061\003\000\002\061\003\000\002\061\003\000\002" +
    "\061\003\000\002\061\003\000\002\061\003\000\002\061" +
    "\003\000\002\061\003\000\002\062\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\240\000\004\012\004\001\002\000\052\004\016\012" +
    "\ufffd\013\ufffd\030\ufffd\032\031\033\014\034\012\042\020" +
    "\044\011\045\ufffd\047\ufffd\050\036\051\ufffd\052\ufffd\053" +
    "\ufffd\054\ufffd\055\ufffd\056\033\057\ufffd\066\032\001\002" +
    "\000\004\002\010\001\002\000\004\067\007\001\002\000" +
    "\004\002\000\001\002\000\004\002\001\001\002\000\004" +
    "\004\225\001\002\000\010\004\uffe3\061\uffe3\063\uffe3\001" +
    "\002\000\006\023\ufff9\031\ufff9\001\002\000\010\004\uffe4" +
    "\061\uffe4\063\uffe4\001\002\000\010\004\uffe7\061\uffe7\063" +
    "\uffe7\001\002\000\010\004\uffe8\061\uffe8\063\uffe8\001\002" +
    "\000\010\004\uffec\061\uffec\063\uffec\001\002\000\010\004" +
    "\uffe2\061\uffe2\063\uffe2\001\002\000\006\023\ufff8\031\ufff8" +
    "\001\002\000\010\004\uffe9\061\uffe9\063\uffe9\001\002\000" +
    "\010\004\uffeb\061\uffeb\063\uffeb\001\002\000\006\004\224" +
    "\063\046\001\002\000\006\023\ufffb\031\ufffb\001\002\000" +
    "\010\004\uffe6\061\uffe6\063\uffe6\001\002\000\006\023\ufffa" +
    "\031\ufffa\001\002\000\010\004\uffea\061\uffea\063\uffea\001" +
    "\002\000\010\004\uffe5\061\uffe5\063\uffe5\001\002\000\020" +
    "\004\016\032\031\033\014\034\012\042\020\050\036\066" +
    "\032\001\002\000\020\004\016\032\031\033\014\034\012" +
    "\042\020\050\036\066\032\001\002\000\030\012\004\013" +
    "\uffda\030\057\045\102\047\060\051\070\052\064\053\073" +
    "\054\071\055\074\057\100\001\002\000\006\023\053\031" +
    "\052\001\002\000\004\012\037\001\002\000\020\004\016" +
    "\032\031\033\014\034\012\042\020\050\036\066\032\001" +
    "\002\000\006\004\047\063\046\001\002\000\006\013\043" +
    "\062\044\001\002\000\006\013\uffde\062\uffde\001\002\000" +
    "\010\004\uffe0\061\uffe0\063\uffe0\001\002\000\020\004\016" +
    "\032\031\033\014\034\012\042\020\050\036\066\032\001" +
    "\002\000\006\013\uffdf\062\uffdf\001\002\000\004\005\050" +
    "\001\002\000\006\013\uffdd\062\uffdd\001\002\000\004\064" +
    "\051\001\002\000\010\004\uffe1\061\uffe1\063\uffe1\001\002" +
    "\000\030\012\ufffe\013\ufffe\030\ufffe\045\ufffe\047\ufffe\051" +
    "\ufffe\052\ufffe\053\ufffe\054\ufffe\055\ufffe\057\ufffe\001\002" +
    "\000\024\004\016\032\031\033\014\034\012\042\020\044" +
    "\011\050\036\056\033\066\032\001\002\000\006\023\ufffc" +
    "\031\ufffc\001\002\000\006\013\uffce\023\uffce\001\002\000" +
    "\006\013\uffd2\023\uffd2\001\002\000\026\004\111\005\130" +
    "\006\127\007\121\010\124\025\104\037\125\040\122\041" +
    "\123\043\105\001\002\000\026\004\111\005\130\006\127" +
    "\007\121\010\124\025\104\037\125\040\122\041\123\043" +
    "\105\001\002\000\004\013\215\001\002\000\006\013\uffdb" +
    "\023\213\001\002\000\006\013\uffcf\023\uffcf\001\002\000" +
    "\026\004\111\005\130\006\127\007\121\010\124\025\104" +
    "\037\125\040\122\041\123\043\105\001\002\000\006\013" +
    "\uffd5\023\uffd5\001\002\000\006\013\uffd7\023\uffd7\001\002" +
    "\000\006\013\uffd8\023\uffd8\001\002\000\026\004\111\005" +
    "\130\006\127\007\121\010\124\025\104\037\125\040\122" +
    "\041\123\043\105\001\002\000\026\004\111\005\130\006" +
    "\127\007\121\010\124\025\104\037\125\040\122\041\123" +
    "\043\105\001\002\000\006\013\uffbd\023\uffbd\001\002\000" +
    "\026\004\111\005\130\006\127\007\121\010\124\025\104" +
    "\037\125\040\122\041\123\043\105\001\002\000\006\013" +
    "\uffc5\023\uffc5\001\002\000\006\013\uffd3\023\uffd3\001\002" +
    "\000\006\013\uffd1\023\uffd1\001\002\000\006\013\uffd6\023" +
    "\uffd6\001\002\000\004\004\177\001\002\000\006\013\uffd0" +
    "\023\uffd0\001\002\000\026\004\111\005\130\006\127\007" +
    "\121\010\124\025\104\037\125\040\122\041\123\043\105" +
    "\001\002\000\006\013\uffd4\023\uffd4\001\002\000\026\004" +
    "\uffa4\005\uffa4\006\uffa4\007\uffa4\010\uffa4\025\uffa4\037\uffa4" +
    "\040\uffa4\041\uffa4\043\uffa4\001\002\000\060\011\uff97\012" +
    "\uff97\013\uff97\014\uff97\015\uff97\016\uff97\017\uff97\020\uff97" +
    "\021\uff97\022\uff97\023\uff97\024\uff97\025\uff97\026\uff97\027" +
    "\uff97\035\uff97\036\uff97\060\uff97\062\uff97\063\uff97\064\uff97" +
    "\065\uff97\066\uff97\001\002\000\004\012\004\001\002\000" +
    "\060\011\uff96\012\uff96\013\uff96\014\uff96\015\uff96\016\uff96" +
    "\017\uff96\020\uff96\021\uff96\022\uff96\023\uff96\024\uff96\025" +
    "\uff96\026\uff96\027\uff96\035\uff96\036\uff96\060\uff96\062\uff96" +
    "\063\uff96\064\uff96\065\uff96\066\uff96\001\002\000\060\011" +
    "\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1" +
    "\020\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1\026" +
    "\uffa1\027\uffa1\035\uffa1\036\uffa1\060\uffa1\062\uffa1\063\uffa1" +
    "\064\uffa1\065\uffa1\066\uffa1\001\002\000\060\011\uff98\012" +
    "\uff98\013\uff98\014\uff98\015\uff98\016\uff98\017\uff98\020\uff98" +
    "\021\uff98\022\uff98\023\uff98\024\uff98\025\uff98\026\uff98\027" +
    "\uff98\035\uff98\036\uff98\060\uff98\062\uff98\063\uff98\064\uff98" +
    "\065\uff98\066\uff98\001\002\000\060\011\uffa5\012\uffa5\013" +
    "\uffa5\014\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5" +
    "\022\uffa5\023\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5\035" +
    "\uffa5\036\uffa5\060\uffa5\062\uffa5\063\163\064\uffa5\065\164" +
    "\066\165\001\002\000\052\011\uffaa\012\uffaa\013\uffaa\014" +
    "\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa" +
    "\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa\035\uffaa\036" +
    "\uffaa\060\uffaa\062\uffaa\064\uffaa\001\002\000\052\011\uffac" +
    "\012\uffac\013\uffac\014\uffac\015\uffac\016\uffac\017\uffac\020" +
    "\uffac\021\uffac\022\uffac\023\uffac\024\uffac\025\uffac\026\155" +
    "\027\157\035\152\036\156\060\154\062\uffac\064\uffac\001" +
    "\002\000\040\011\uffaf\012\uffaf\013\uffaf\014\uffaf\015\uffaf" +
    "\016\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024" +
    "\uffaf\025\150\062\uffaf\064\uffaf\001\002\000\036\011\uffb8" +
    "\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020" +
    "\uffb8\021\uffb8\022\uffb8\023\uffb8\024\146\062\uffb8\064\uffb8" +
    "\001\002\000\034\011\uffba\012\uffba\013\uffba\014\136\015" +
    "\143\016\137\017\140\020\144\021\142\022\uffba\023\uffba" +
    "\062\uffba\064\uffba\001\002\000\020\011\uffbc\012\uffbc\013" +
    "\uffbc\022\134\023\uffbc\062\uffbc\064\uffbc\001\002\000\060" +
    "\011\uff99\012\uff99\013\uff99\014\uff99\015\uff99\016\uff99\017" +
    "\uff99\020\uff99\021\uff99\022\uff99\023\uff99\024\uff99\025\uff99" +
    "\026\uff99\027\uff99\035\uff99\036\uff99\060\uff99\062\uff99\063" +
    "\uff99\064\uff99\065\uff99\066\uff99\001\002\000\060\011\uff9b" +
    "\012\uff9b\013\uff9b\014\uff9b\015\uff9b\016\uff9b\017\uff9b\020" +
    "\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b\025\uff9b\026\uff9b" +
    "\027\uff9b\035\uff9b\036\uff9b\060\uff9b\062\uff9b\063\uff9b\064" +
    "\uff9b\065\uff9b\066\uff9b\001\002\000\060\011\uff9a\012\uff9a" +
    "\013\uff9a\014\uff9a\015\uff9a\016\uff9a\017\uff9a\020\uff9a\021" +
    "\uff9a\022\uff9a\023\uff9a\024\uff9a\025\uff9a\026\uff9a\027\uff9a" +
    "\035\uff9a\036\uff9a\060\uff9a\062\uff9a\063\uff9a\064\uff9a\065" +
    "\uff9a\066\uff9a\001\002\000\026\004\111\005\130\006\127" +
    "\007\121\010\124\025\104\037\125\040\122\041\123\043" +
    "\105\001\002\000\026\004\uffa3\005\uffa3\006\uffa3\007\uffa3" +
    "\010\uffa3\025\uffa3\037\uffa3\040\uffa3\041\uffa3\043\uffa3\001" +
    "\002\000\026\004\111\005\130\006\127\007\121\010\124" +
    "\025\104\037\125\040\122\041\123\043\105\001\002\000" +
    "\060\011\uff9c\012\uff9c\013\uff9c\014\uff9c\015\uff9c\016\uff9c" +
    "\017\uff9c\020\uff9c\021\uff9c\022\uff9c\023\uff9c\024\uff9c\025" +
    "\uff9c\026\uff9c\027\uff9c\035\uff9c\036\uff9c\060\uff9c\062\uff9c" +
    "\063\uff9c\064\uff9c\065\uff9c\066\uff9c\001\002\000\060\011" +
    "\uff9d\012\uff9d\013\uff9d\014\uff9d\015\uff9d\016\uff9d\017\uff9d" +
    "\020\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d\025\uff9d\026" +
    "\uff9d\027\uff9d\035\uff9d\036\uff9d\060\uff9d\062\uff9d\063\uff9d" +
    "\064\uff9d\065\uff9d\066\uff9d\001\002\000\052\011\uffa6\012" +
    "\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6" +
    "\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6\026\uffa6\027" +
    "\uffa6\035\uffa6\036\uffa6\060\uffa6\062\uffa6\064\uffa6\001\002" +
    "\000\006\011\133\022\134\001\002\000\060\011\uff95\012" +
    "\uff95\013\uff95\014\uff95\015\uff95\016\uff95\017\uff95\020\uff95" +
    "\021\uff95\022\uff95\023\uff95\024\uff95\025\uff95\026\uff95\027" +
    "\uff95\035\uff95\036\uff95\060\uff95\062\uff95\063\uff95\064\uff95" +
    "\065\uff95\066\uff95\001\002\000\026\004\111\005\130\006" +
    "\127\007\121\010\124\025\104\037\125\040\122\041\123" +
    "\043\105\001\002\000\034\011\uffbb\012\uffbb\013\uffbb\014" +
    "\136\015\143\016\137\017\140\020\144\021\142\022\uffbb" +
    "\023\uffbb\062\uffbb\064\uffbb\001\002\000\026\004\uffb7\005" +
    "\uffb7\006\uffb7\007\uffb7\010\uffb7\025\uffb7\037\uffb7\040\uffb7" +
    "\041\uffb7\043\uffb7\001\002\000\026\004\uffb5\005\uffb5\006" +
    "\uffb5\007\uffb5\010\uffb5\025\uffb5\037\uffb5\040\uffb5\041\uffb5" +
    "\043\uffb5\001\002\000\026\004\uffb4\005\uffb4\006\uffb4\007" +
    "\uffb4\010\uffb4\025\uffb4\037\uffb4\040\uffb4\041\uffb4\043\uffb4" +
    "\001\002\000\026\004\111\005\130\006\127\007\121\010" +
    "\124\025\104\037\125\040\122\041\123\043\105\001\002" +
    "\000\026\004\uffb2\005\uffb2\006\uffb2\007\uffb2\010\uffb2\025" +
    "\uffb2\037\uffb2\040\uffb2\041\uffb2\043\uffb2\001\002\000\026" +
    "\004\uffb6\005\uffb6\006\uffb6\007\uffb6\010\uffb6\025\uffb6\037" +
    "\uffb6\040\uffb6\041\uffb6\043\uffb6\001\002\000\026\004\uffb3" +
    "\005\uffb3\006\uffb3\007\uffb3\010\uffb3\025\uffb3\037\uffb3\040" +
    "\uffb3\041\uffb3\043\uffb3\001\002\000\036\011\uffb9\012\uffb9" +
    "\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021" +
    "\uffb9\022\uffb9\023\uffb9\024\146\062\uffb9\064\uffb9\001\002" +
    "\000\026\004\111\005\130\006\127\007\121\010\124\025" +
    "\104\037\125\040\122\041\123\043\105\001\002\000\036" +
    "\011\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1\016\uffb1\017" +
    "\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\062\uffb1" +
    "\064\uffb1\001\002\000\026\004\111\005\130\006\127\007" +
    "\121\010\124\025\104\037\125\040\122\041\123\043\105" +
    "\001\002\000\036\011\uffb0\012\uffb0\013\uffb0\014\uffb0\015" +
    "\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0" +
    "\024\uffb0\062\uffb0\064\uffb0\001\002\000\026\004\111\005" +
    "\130\006\127\007\121\010\124\025\104\037\125\040\122" +
    "\041\123\043\105\001\002\000\026\004\111\005\130\006" +
    "\127\007\121\010\124\025\104\037\125\040\122\041\123" +
    "\043\105\001\002\000\026\004\uffa7\005\uffa7\006\uffa7\007" +
    "\uffa7\010\uffa7\025\uffa7\037\uffa7\040\uffa7\041\uffa7\043\uffa7" +
    "\001\002\000\026\004\uffa9\005\uffa9\006\uffa9\007\uffa9\010" +
    "\uffa9\025\uffa9\037\uffa9\040\uffa9\041\uffa9\043\uffa9\001\002" +
    "\000\026\004\111\005\130\006\127\007\121\010\124\025" +
    "\104\037\125\040\122\041\123\043\105\001\002\000\026" +
    "\004\uffa8\005\uffa8\006\uffa8\007\uffa8\010\uffa8\025\uffa8\037" +
    "\uffa8\040\uffa8\041\uffa8\043\uffa8\001\002\000\046\011\uffad" +
    "\012\uffad\013\uffad\014\uffad\015\uffad\016\uffad\017\uffad\020" +
    "\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025\uffad\026\155" +
    "\027\157\060\154\062\uffad\064\uffad\001\002\000\052\011" +
    "\uffab\012\uffab\013\uffab\014\uffab\015\uffab\016\uffab\017\uffab" +
    "\020\uffab\021\uffab\022\uffab\023\uffab\024\uffab\025\uffab\026" +
    "\uffab\027\uffab\035\uffab\036\uffab\060\uffab\062\uffab\064\uffab" +
    "\001\002\000\040\011\uffae\012\uffae\013\uffae\014\uffae\015" +
    "\uffae\016\uffae\017\uffae\020\uffae\021\uffae\022\uffae\023\uffae" +
    "\024\uffae\025\uffae\062\uffae\064\uffae\001\002\000\026\004" +
    "\111\005\130\006\127\007\121\010\124\025\104\037\125" +
    "\040\122\041\123\043\105\001\002\000\004\004\167\001" +
    "\002\000\060\011\uff9e\012\uff9e\013\uff9e\014\uff9e\015\uff9e" +
    "\016\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e\024" +
    "\uff9e\025\uff9e\026\uff9e\027\uff9e\035\uff9e\036\uff9e\060\uff9e" +
    "\062\uff9e\063\uff9e\064\uff9e\065\uff9e\066\uff9e\001\002\000" +
    "\060\011\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2\016\uffa2" +
    "\017\uffa2\020\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2\025" +
    "\uffa2\026\uffa2\027\uffa2\035\uffa2\036\uffa2\060\uffa2\062\uffa2" +
    "\063\uffa2\064\uffa2\065\uffa2\066\uffa2\001\002\000\060\011" +
    "\uff9f\012\uff9f\013\uff9f\014\uff9f\015\uff9f\016\uff9f\017\uff9f" +
    "\020\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f\025\uff9f\026" +
    "\uff9f\027\uff9f\035\uff9f\036\uff9f\060\uff9f\062\uff9f\063\uff9f" +
    "\064\uff9f\065\uff9f\066\uff9f\001\002\000\004\064\171\001" +
    "\002\000\060\011\uffa0\012\uffa0\013\uffa0\014\uffa0\015\uffa0" +
    "\016\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0\023\uffa0\024" +
    "\uffa0\025\uffa0\026\uffa0\027\uffa0\035\uffa0\036\uffa0\060\uffa0" +
    "\062\uffa0\063\uffa0\064\uffa0\065\uffa0\066\uffa0\001\002\000" +
    "\010\013\uffca\023\uffca\046\173\001\002\000\004\012\004" +
    "\001\002\000\006\013\uffcb\023\uffcb\001\002\000\006\013" +
    "\uffcc\023\uffcc\001\002\000\006\013\uffc9\023\uffc9\001\002" +
    "\000\004\010\200\001\002\000\030\004\111\005\130\006" +
    "\127\007\121\010\124\011\uffc0\025\104\037\125\040\122" +
    "\041\123\043\105\001\002\000\004\011\206\001\002\000" +
    "\006\011\uffbe\062\uffbe\001\002\000\006\011\uffc1\062\204" +
    "\001\002\000\026\004\111\005\130\006\127\007\121\010" +
    "\124\025\104\037\125\040\122\041\123\043\105\001\002" +
    "\000\006\011\uffbf\062\uffbf\001\002\000\006\013\uffc2\023" +
    "\uffc2\001\002\000\006\013\uffc7\023\uffc7\001\002\000\006" +
    "\013\uffc6\023\uffc6\001\002\000\006\013\uffc4\023\uffc4\001" +
    "\002\000\006\013\uffc3\023\uffc3\001\002\000\026\012\004" +
    "\030\057\045\102\047\060\051\070\052\064\053\073\054" +
    "\071\055\074\057\100\001\002\000\006\013\uffd9\023\uffd9" +
    "\001\002\000\014\013\uffff\023\uffff\031\uffff\046\uffff\067" +
    "\uffff\001\002\000\004\012\004\001\002\000\006\013\uffc8" +
    "\023\uffc8\001\002\000\006\013\uffcd\023\uffcd\001\002\000" +
    "\006\004\222\063\046\001\002\000\006\023\ufff7\031\ufff7" +
    "\001\002\000\010\004\uffdc\061\uffdc\063\uffdc\001\002\000" +
    "\006\023\ufff6\031\ufff6\001\002\000\004\010\227\001\002" +
    "\000\004\012\004\001\002\000\022\004\016\011\ufff2\032" +
    "\031\033\014\034\012\042\020\050\036\066\032\001\002" +
    "\000\004\011\241\001\002\000\010\004\uffed\061\236\063" +
    "\046\001\002\000\006\011\ufff3\062\234\001\002\000\006" +
    "\011\ufff0\062\ufff0\001\002\000\020\004\016\032\031\033" +
    "\014\034\012\042\020\050\036\066\032\001\002\000\006" +
    "\011\ufff1\062\ufff1\001\002\000\004\004\uffee\001\002\000" +
    "\004\004\240\001\002\000\006\011\uffef\062\uffef\001\002" +
    "\000\004\012\ufff4\001\002\000\006\023\ufff5\031\ufff5\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\240\000\006\002\004\003\005\001\001\000\034\004" +
    "\033\005\034\006\024\007\026\010\012\011\020\040\023" +
    "\041\022\042\021\043\014\044\016\045\027\046\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\041\222\042\021" +
    "\043\014\045\027\046\025\001\001\000\020\040\220\041" +
    "\022\042\021\043\014\044\016\045\027\046\025\001\001" +
    "\000\036\003\071\012\060\013\061\014\066\015\065\016" +
    "\076\021\064\022\102\023\074\024\055\025\075\026\100" +
    "\027\062\030\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\040\037\041\022\042\021\043\014\044\016" +
    "\045\027\046\025\047\040\050\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\040\037\041\022\042\021\043\014\044\016\045" +
    "\027\046\025\050\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\006\053\007\026\010\012" +
    "\011\020\040\023\041\022\042\021\043\014\044\016\045" +
    "\027\046\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\051\217\052\117\053\116\054" +
    "\115\055\114\056\113\057\112\060\111\061\107\062\106" +
    "\065\125\001\001\000\030\051\215\052\117\053\116\054" +
    "\115\055\114\056\113\057\112\060\111\061\107\062\106" +
    "\065\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\051\211\052\117\053\116\054\115" +
    "\055\114\056\113\057\112\060\111\061\107\062\106\065" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\051\210\052\117\053\116\054\115\055" +
    "\114\056\113\057\112\060\111\061\107\062\106\065\125" +
    "\001\001\000\030\051\207\052\117\053\116\054\115\055" +
    "\114\056\113\057\112\060\111\061\107\062\106\065\125" +
    "\001\001\000\002\001\001\000\030\051\206\052\117\053" +
    "\116\054\115\055\114\056\113\057\112\060\111\061\107" +
    "\062\106\065\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\051\105\052\117\053\116\054" +
    "\115\055\114\056\113\057\112\060\111\061\107\062\106" +
    "\065\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\171\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\066\165\001" +
    "\001\000\002\001\001\000\004\064\152\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\063\140\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\052\131\053\116\054\115\055\114\056" +
    "\113\057\112\060\111\061\107\062\106\065\125\001\001" +
    "\000\002\001\001\000\014\057\130\060\111\061\107\062" +
    "\106\065\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\053\134\054\115\055\114\056\113\057\112\060\111" +
    "\061\107\062\106\065\125\001\001\000\004\063\140\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\054\144\055\114\056\113\057\112\060\111\061" +
    "\107\062\106\065\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\055" +
    "\146\056\113\057\112\060\111\061\107\062\106\065\125" +
    "\001\001\000\002\001\001\000\020\055\150\056\113\057" +
    "\112\060\111\061\107\062\106\065\125\001\001\000\002" +
    "\001\001\000\020\055\161\056\113\057\112\060\111\061" +
    "\107\062\106\065\125\001\001\000\014\057\160\060\111" +
    "\061\107\062\106\065\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\056\157\057\112\060\111\061\107" +
    "\062\106\065\125\001\001\000\002\001\001\000\004\064" +
    "\152\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\051\167\052\117\053\116\054\115\055\114\056\113\057" +
    "\112\060\111\061\107\062\106\065\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\173" +
    "\020\174\001\001\000\004\003\175\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\031\200\032\202\051\201\052\117\053\116\054" +
    "\115\055\114\056\113\057\112\060\111\061\107\062\106" +
    "\065\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\051\204\052\117\053\116\054\115" +
    "\055\114\056\113\057\112\060\111\061\107\062\106\065" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\003\071\014\213\015\065\016\076\021\064" +
    "\022\102\023\074\024\055\025\075\026\100\027\062\030" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\216\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\225\001\001\000\004\003\241\001" +
    "\001\000\026\034\227\035\231\036\232\040\230\041\022" +
    "\042\021\043\014\044\016\045\027\046\025\001\001\000" +
    "\002\001\001\000\004\037\236\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\036\234\040\230\041\022\042" +
    "\021\043\014\044\016\045\027\046\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 
  return getScanner().next_token(); 

    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= bloque O_EOF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("programa",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bloque ::= LLAVEAP declar_opt intr_opt LLAVECIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("bloque",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declar_opt ::= declaraciones FINDECLAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declar_opt",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declar_opt ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declar_opt",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaraciones ::= declaraciones PCOMA declaracion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaraciones",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaraciones ::= declaracion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaraciones",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracion ::= declar_var 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaracion",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion ::= declar_tipo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaracion",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion ::= declar_proc 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaracion",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declar_tipo ::= P_TYPE tipo_0 IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declar_tipo",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declar_var ::= tipo_0 IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declar_var",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declar_proc ::= P_PROC IDEN param_formales bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declar_proc",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // param_formales ::= PAP lista_param_form_opt PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("param_formales",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lista_param_form_opt ::= lista_param_form 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_param_form_opt",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lista_param_form_opt ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_param_form_opt",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lista_param_form ::= lista_param_form COMA param_formal 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_param_form",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lista_param_form ::= param_formal 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_param_form",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // param_formal ::= tipo_0 ref_opt IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("param_formal",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ref_opt ::= AND 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ref_opt",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ref_opt ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ref_opt",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipo_0 ::= array 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo_0",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipo_0 ::= tipo_1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo_0",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipo_1 ::= puntero 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo_1",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipo_1 ::= tipo_2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo_1",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipo_2 ::= IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo_2",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tipo_2 ::= tipo_basico 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo_2",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tipo_2 ::= struct 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo_2",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipo_basico ::= P_INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo_basico",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipo_basico ::= P_REAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo_basico",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipo_basico ::= P_BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo_basico",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipo_basico ::= P_STRING 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo_basico",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // array ::= tipo_0 CORCHETEAP ENT CORCHETECIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("array",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // struct ::= P_STRUCT LLAVEAP campos_struct LLAVECIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("struct",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // campos_struct ::= campos_struct COMA campo_struct 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("campos_struct",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // campos_struct ::= campo_struct 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("campos_struct",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // campo_struct ::= tipo_0 IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("campo_struct",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // puntero ::= EXPONENTE tipo_1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("puntero",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // intr_opt ::= lista_intr 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("intr_opt",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // intr_opt ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("intr_opt",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // lista_intr ::= lista_intr PCOMA instruccion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_intr",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // lista_intr ::= instruccion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_intr",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instruccion ::= instruccion_eval 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instruccion ::= instruccion_if 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instruccion ::= instruccion_while 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instruccion ::= instruccion_read 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // instruccion ::= instruccion_write 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // instruccion ::= instruccion_nl 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // instruccion ::= instruccion_new 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // instruccion ::= instruccion_delete 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // instruccion ::= instruccion_call 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // instruccion ::= instruccion_compuesta 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // instruccion_eval ::= INIEVAL expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion_eval",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // instruccion_if ::= P_IF expresion bloque instruccion_else_opt 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion_if",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // instruccion_else_opt ::= instruccion_else 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion_else_opt",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // instruccion_else_opt ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion_else_opt",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // instruccion_else ::= P_ELSE bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion_else",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // instruccion_while ::= P_WHILE expresion bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion_while",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // instruccion_read ::= P_READ expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion_read",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // instruccion_write ::= P_WRITE expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion_write",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // instruccion_nl ::= P_NL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion_nl",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // instruccion_new ::= P_NEW expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion_new",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // instruccion_delete ::= P_DELETE expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion_delete",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // instruccion_call ::= P_CALL IDEN PAP lista_param_real_opt PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion_call",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // lista_param_real_opt ::= lista_param_real 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_param_real_opt",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // lista_param_real_opt ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_param_real_opt",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // lista_param_real ::= lista_param_real COMA expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_param_real",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // lista_param_real ::= expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_param_real",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // instruccion_compuesta ::= bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion_compuesta",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresion ::= E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("expresion",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E0 ::= E0 IGUAL E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E0 ::= E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E1 ::= E1 OP1 E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E1 ::= E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OP1 ::= LT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",49, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OP1 ::= LEQ 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",49, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OP1 ::= GT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",49, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OP1 ::= GEQ 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",49, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OP1 ::= COMP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",49, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OP1 ::= DIST 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",49, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E2 ::= E2 MAS E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E2 ::= E3 MENOS E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E2 ::= E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E3 ::= E4 P_AND E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E3 ::= E4 P_OR E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // E3 ::= E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E4 ::= E4 OP4 E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E4 ::= E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OP4 ::= MUL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP4",50, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OP4 ::= DIV 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP4",50, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OP4 ::= PORCENTAJE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP4",50, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // E5 ::= OP5 E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",45, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // E5 ::= E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",45, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OP5 ::= MENOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP5",51, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OP5 ::= P_NOT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP5",51, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // E6 ::= E6 OP6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",46, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // E6 ::= E7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",46, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OP6 ::= CORCHETEAP expresion CORCHETECIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP6",52, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OP6 ::= PUNTO IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP6",52, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OP6 ::= EXPONENTE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP6",52, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // E7 ::= ENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",47, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // E7 ::= REAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",47, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // E7 ::= P_TRUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",47, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // E7 ::= P_FALSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",47, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // E7 ::= STRING 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",47, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // E7 ::= IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",47, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // E7 ::= P_NULL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",47, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // E7 ::= E8 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",47, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // E8 ::= PAP E0 PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",48, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

