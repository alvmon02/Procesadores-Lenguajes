
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sun Mar 02 18:21:05 CET 2025
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sun Mar 02 18:21:05 CET 2025
  */
public class asint/AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public asint/AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public asint/AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public asint/AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\167\000\002\002\003\000\002\002\004\000\002\003" +
    "\006\000\002\004\004\000\002\004\002\000\002\005\004" +
    "\000\002\052\005\000\002\052\002\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\007\004\000\002" +
    "\010\005\000\002\011\006\000\002\033\005\000\002\034" +
    "\003\000\002\034\002\000\002\035\004\000\002\053\005" +
    "\000\002\053\002\000\002\036\005\000\002\037\003\000" +
    "\002\037\002\000\002\040\003\000\002\040\003\000\002" +
    "\041\003\000\002\041\003\000\002\042\003\000\002\042" +
    "\003\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\043\003\000\002\044\006\000\002\046\005\000" +
    "\002\047\004\000\002\054\005\000\002\054\002\000\002" +
    "\050\004\000\002\045\004\000\002\012\003\000\002\012" +
    "\002\000\002\013\004\000\002\055\005\000\002\055\002" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\015\004\000\002\016\006\000\002\020\003" +
    "\000\002\020\002\000\002\017\004\000\002\021\005\000" +
    "\002\022\004\000\002\023\004\000\002\024\003\000\002" +
    "\025\004\000\002\026\004\000\002\027\007\000\002\031" +
    "\003\000\002\031\002\000\002\032\004\000\002\056\005" +
    "\000\002\056\002\000\002\030\003\000\002\051\003\000" +
    "\002\057\004\000\002\060\005\000\002\060\002\000\002" +
    "\061\004\000\002\062\005\000\002\062\002\000\002\063" +
    "\003\000\002\063\003\000\002\063\003\000\002\063\003" +
    "\000\002\063\003\000\002\063\003\000\002\064\005\000" +
    "\002\065\004\000\002\065\002\000\002\066\005\000\002" +
    "\066\002\000\002\067\004\000\002\070\004\000\002\070" +
    "\004\000\002\071\002\000\002\072\004\000\002\073\005" +
    "\000\002\073\002\000\002\074\003\000\002\074\003\000" +
    "\002\075\004\000\002\075\003\000\002\076\003\000\002" +
    "\076\003\000\002\077\004\000\002\100\004\000\002\100" +
    "\002\000\002\101\005\000\002\101\004\000\002\101\003" +
    "\000\002\102\003\000\002\102\003\000\002\102\003\000" +
    "\002\102\003\000\002\102\003\000\002\102\003\000\002" +
    "\102\003\000\002\102\003\000\002\103\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\004\012\004\001\002\000\050\004\015\012" +
    "\ufffd\013\ufffd\030\ufffd\032\027\033\013\034\011\042\016" +
    "\044\010\045\ufffd\047\ufffd\051\ufffd\052\ufffd\053\ufffd\054" +
    "\ufffd\055\ufffd\056\031\057\ufffd\066\030\001\002\000\004" +
    "\002\007\001\002\000\004\002\001\001\002\000\004\002" +
    "\000\001\002\000\004\004\227\001\002\000\010\004\uffe2" +
    "\061\uffe2\063\uffe2\001\002\000\006\023\ufff8\031\ufff8\001" +
    "\002\000\010\004\uffe3\061\uffe3\063\uffe3\001\002\000\010" +
    "\004\uffe5\061\uffe5\063\uffe5\001\002\000\010\004\uffe6\061" +
    "\uffe6\063\uffe6\001\002\000\010\004\uffe1\061\uffe1\063\uffe1" +
    "\001\002\000\010\004\uffea\061\uffea\063\uffea\001\002\000" +
    "\006\023\ufff7\031\ufff7\001\002\000\010\004\uffe7\061\uffe7" +
    "\063\uffe7\001\002\000\010\004\uffe9\061\uffe9\063\uffe9\001" +
    "\002\000\006\004\226\063\215\001\002\000\006\023\223" +
    "\031\ufffa\001\002\000\006\023\ufff9\031\ufff9\001\002\000" +
    "\010\004\uffe8\061\uffe8\063\uffe8\001\002\000\010\004\uffe4" +
    "\061\uffe4\063\uffe4\001\002\000\016\004\015\032\027\033" +
    "\013\034\011\042\016\066\030\001\002\000\016\004\015" +
    "\032\027\033\013\034\011\042\016\066\030\001\002\000" +
    "\030\012\004\013\uffd8\030\037\045\062\047\040\051\047" +
    "\052\044\053\053\054\051\055\054\057\060\001\002\000" +
    "\004\031\034\001\002\000\030\012\ufffe\013\ufffe\030\ufffe" +
    "\045\ufffe\047\ufffe\051\ufffe\052\ufffe\053\ufffe\054\ufffe\055" +
    "\ufffe\057\ufffe\001\002\000\006\013\uffcb\023\uffcb\001\002" +
    "\000\006\013\uffcf\023\uffcf\001\002\000\026\004\071\005" +
    "\110\006\107\007\101\010\104\025\064\037\105\040\102" +
    "\041\103\043\065\001\002\000\026\004\071\005\110\006" +
    "\107\007\101\010\104\025\064\037\105\040\102\041\103" +
    "\043\065\001\002\000\004\013\210\001\002\000\004\013" +
    "\uffd9\001\002\000\006\013\uffcc\023\uffcc\001\002\000\026" +
    "\004\071\005\110\006\107\007\101\010\104\025\064\037" +
    "\105\040\102\041\103\043\065\001\002\000\006\013\uffd2" +
    "\023\uffd2\001\002\000\006\013\uffd5\023\204\001\002\000" +
    "\026\004\071\005\110\006\107\007\101\010\104\025\064" +
    "\037\105\040\102\041\103\043\065\001\002\000\006\013" +
    "\uffd4\023\uffd4\001\002\000\026\004\071\005\110\006\107" +
    "\007\101\010\104\025\064\037\105\040\102\041\103\043" +
    "\065\001\002\000\006\013\uffb9\023\uffb9\001\002\000\026" +
    "\004\071\005\110\006\107\007\101\010\104\025\064\037" +
    "\105\040\102\041\103\043\065\001\002\000\006\013\uffc2" +
    "\023\uffc2\001\002\000\006\013\uffd0\023\uffd0\001\002\000" +
    "\006\013\uffce\023\uffce\001\002\000\006\013\uffd3\023\uffd3" +
    "\001\002\000\004\004\166\001\002\000\006\013\uffcd\023" +
    "\uffcd\001\002\000\026\004\071\005\110\006\107\007\101" +
    "\010\104\025\064\037\105\040\102\041\103\043\065\001" +
    "\002\000\006\013\uffd1\023\uffd1\001\002\000\026\004\uff9b" +
    "\005\uff9b\006\uff9b\007\uff9b\010\uff9b\025\uff9b\037\uff9b\040" +
    "\uff9b\041\uff9b\043\uff9b\001\002\000\050\011\uff8d\012\uff8d" +
    "\013\uff8d\014\uff8d\015\uff8d\016\uff8d\017\uff8d\020\uff8d\021" +
    "\uff8d\022\uff8d\023\uff8d\024\uff8d\025\uff8d\026\uff8d\027\uff8d" +
    "\063\uff8d\064\uff8d\065\uff8d\066\uff8d\001\002\000\004\012" +
    "\004\001\002\000\050\011\uff8c\012\uff8c\013\uff8c\014\uff8c" +
    "\015\uff8c\016\uff8c\017\uff8c\020\uff8c\021\uff8c\022\uff8c\023" +
    "\uff8c\024\uff8c\025\uff8c\026\uff8c\027\uff8c\063\uff8c\064\uff8c" +
    "\065\uff8c\066\uff8c\001\002\000\050\011\uff97\012\uff97\013" +
    "\uff97\014\uff97\015\uff97\016\uff97\017\uff97\020\uff97\021\uff97" +
    "\022\uff97\023\uff97\024\uff97\025\uff97\026\uff97\027\uff97\063" +
    "\151\064\uff97\065\150\066\152\001\002\000\050\011\uff8e" +
    "\012\uff8e\013\uff8e\014\uff8e\015\uff8e\016\uff8e\017\uff8e\020" +
    "\uff8e\021\uff8e\022\uff8e\023\uff8e\024\uff8e\025\uff8e\026\uff8e" +
    "\027\uff8e\063\uff8e\064\uff8e\065\uff8e\066\uff8e\001\002\000" +
    "\042\011\uff9c\012\uff9c\013\uff9c\014\uff9c\015\uff9c\016\uff9c" +
    "\017\uff9c\020\uff9c\021\uff9c\022\uff9c\023\uff9c\024\uff9c\025" +
    "\uff9c\026\uff9c\027\uff9c\064\uff9c\001\002\000\042\011\uffa0" +
    "\012\uffa0\013\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0\020" +
    "\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\025\uffa0\026\143" +
    "\027\144\064\uffa0\001\002\000\036\011\uffa3\012\uffa3\013" +
    "\uffa3\014\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3" +
    "\022\uffa3\023\uffa3\024\uffa3\025\uffa3\064\uffa3\001\002\000" +
    "\036\011\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9" +
    "\017\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025" +
    "\133\064\uffa9\001\002\000\032\011\uffb2\012\uffb2\013\uffb2" +
    "\014\120\015\126\016\121\017\125\020\127\021\124\022" +
    "\uffb2\023\uffb2\064\uffb2\001\002\000\016\011\uffb5\012\uffb5" +
    "\013\uffb5\022\115\023\uffb5\064\uffb5\001\002\000\012\012" +
    "\uffb8\013\uffb8\023\uffb8\064\uffb8\001\002\000\050\011\uff8f" +
    "\012\uff8f\013\uff8f\014\uff8f\015\uff8f\016\uff8f\017\uff8f\020" +
    "\uff8f\021\uff8f\022\uff8f\023\uff8f\024\uff8f\025\uff8f\026\uff8f" +
    "\027\uff8f\063\uff8f\064\uff8f\065\uff8f\066\uff8f\001\002\000" +
    "\050\011\uff91\012\uff91\013\uff91\014\uff91\015\uff91\016\uff91" +
    "\017\uff91\020\uff91\021\uff91\022\uff91\023\uff91\024\uff91\025" +
    "\uff91\026\uff91\027\uff91\063\uff91\064\uff91\065\uff91\066\uff91" +
    "\001\002\000\050\011\uff90\012\uff90\013\uff90\014\uff90\015" +
    "\uff90\016\uff90\017\uff90\020\uff90\021\uff90\022\uff90\023\uff90" +
    "\024\uff90\025\uff90\026\uff90\027\uff90\063\uff90\064\uff90\065" +
    "\uff90\066\uff90\001\002\000\026\004\071\005\110\006\107" +
    "\007\101\010\104\025\064\037\105\040\102\041\103\043" +
    "\065\001\002\000\026\004\uff9a\005\uff9a\006\uff9a\007\uff9a" +
    "\010\uff9a\025\uff9a\037\uff9a\040\uff9a\041\uff9a\043\uff9a\001" +
    "\002\000\026\004\071\005\110\006\107\007\101\010\104" +
    "\025\064\037\105\040\102\041\103\043\065\001\002\000" +
    "\050\011\uff92\012\uff92\013\uff92\014\uff92\015\uff92\016\uff92" +
    "\017\uff92\020\uff92\021\uff92\022\uff92\023\uff92\024\uff92\025" +
    "\uff92\026\uff92\027\uff92\063\uff92\064\uff92\065\uff92\066\uff92" +
    "\001\002\000\050\011\uff93\012\uff93\013\uff93\014\uff93\015" +
    "\uff93\016\uff93\017\uff93\020\uff93\021\uff93\022\uff93\023\uff93" +
    "\024\uff93\025\uff93\026\uff93\027\uff93\063\uff93\064\uff93\065" +
    "\uff93\066\uff93\001\002\000\042\011\uff9d\012\uff9d\013\uff9d" +
    "\014\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d\022" +
    "\uff9d\023\uff9d\024\uff9d\025\uff9d\026\uff9d\027\uff9d\064\uff9d" +
    "\001\002\000\004\011\113\001\002\000\050\011\uff8b\012" +
    "\uff8b\013\uff8b\014\uff8b\015\uff8b\016\uff8b\017\uff8b\020\uff8b" +
    "\021\uff8b\022\uff8b\023\uff8b\024\uff8b\025\uff8b\026\uff8b\027" +
    "\uff8b\063\uff8b\064\uff8b\065\uff8b\066\uff8b\001\002\000\014" +
    "\011\uffb7\012\uffb7\013\uffb7\023\uffb7\064\uffb7\001\002\000" +
    "\026\004\071\005\110\006\107\007\101\010\104\025\064" +
    "\037\105\040\102\041\103\043\065\001\002\000\016\011" +
    "\uffb5\012\uffb5\013\uffb5\022\115\023\uffb5\064\uffb5\001\002" +
    "\000\014\011\uffb6\012\uffb6\013\uffb6\023\uffb6\064\uffb6\001" +
    "\002\000\026\004\uffb1\005\uffb1\006\uffb1\007\uffb1\010\uffb1" +
    "\025\uffb1\037\uffb1\040\uffb1\041\uffb1\043\uffb1\001\002\000" +
    "\026\004\uffaf\005\uffaf\006\uffaf\007\uffaf\010\uffaf\025\uffaf" +
    "\037\uffaf\040\uffaf\041\uffaf\043\uffaf\001\002\000\016\011" +
    "\uffb4\012\uffb4\013\uffb4\022\uffb4\023\uffb4\064\uffb4\001\002" +
    "\000\026\004\071\005\110\006\107\007\101\010\104\025" +
    "\064\037\105\040\102\041\103\043\065\001\002\000\026" +
    "\004\uffac\005\uffac\006\uffac\007\uffac\010\uffac\025\uffac\037" +
    "\uffac\040\uffac\041\uffac\043\uffac\001\002\000\026\004\uffae" +
    "\005\uffae\006\uffae\007\uffae\010\uffae\025\uffae\037\uffae\040" +
    "\uffae\041\uffae\043\uffae\001\002\000\026\004\uffb0\005\uffb0" +
    "\006\uffb0\007\uffb0\010\uffb0\025\uffb0\037\uffb0\040\uffb0\041" +
    "\uffb0\043\uffb0\001\002\000\026\004\uffad\005\uffad\006\uffad" +
    "\007\uffad\010\uffad\025\uffad\037\uffad\040\uffad\041\uffad\043" +
    "\uffad\001\002\000\032\011\uffb2\012\uffb2\013\uffb2\014\120" +
    "\015\126\016\121\017\125\020\127\021\124\022\uffb2\023" +
    "\uffb2\064\uffb2\001\002\000\016\011\uffb3\012\uffb3\013\uffb3" +
    "\022\uffb3\023\uffb3\064\uffb3\001\002\000\034\011\uffa7\012" +
    "\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7" +
    "\021\uffa7\022\uffa7\023\uffa7\024\136\064\uffa7\001\002\000" +
    "\026\004\071\005\110\006\107\007\101\010\104\025\064" +
    "\037\105\040\102\041\103\043\065\001\002\000\034\011" +
    "\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa" +
    "\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\064\uffaa\001" +
    "\002\000\032\011\uffab\012\uffab\013\uffab\014\uffab\015\uffab" +
    "\016\uffab\017\uffab\020\uffab\021\uffab\022\uffab\023\uffab\064" +
    "\uffab\001\002\000\026\004\071\005\110\006\107\007\101" +
    "\010\104\025\064\037\105\040\102\041\103\043\065\001" +
    "\002\000\034\011\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7" +
    "\016\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\024" +
    "\136\064\uffa7\001\002\000\032\011\uffa8\012\uffa8\013\uffa8" +
    "\014\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022" +
    "\uffa8\023\uffa8\064\uffa8\001\002\000\036\011\uffa6\012\uffa6" +
    "\013\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021" +
    "\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6\064\uffa6\001\002" +
    "\000\026\004\071\005\110\006\107\007\101\010\104\025" +
    "\064\037\105\040\102\041\103\043\065\001\002\000\026" +
    "\004\uff9f\005\uff9f\006\uff9f\007\uff9f\010\uff9f\025\uff9f\037" +
    "\uff9f\040\uff9f\041\uff9f\043\uff9f\001\002\000\026\004\uff9e" +
    "\005\uff9e\006\uff9e\007\uff9e\010\uff9e\025\uff9e\037\uff9e\040" +
    "\uff9e\041\uff9e\043\uff9e\001\002\000\036\011\uffa2\012\uffa2" +
    "\013\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021" +
    "\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2\064\uffa2\001\002" +
    "\000\042\011\uffa0\012\uffa0\013\uffa0\014\uffa0\015\uffa0\016" +
    "\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0" +
    "\025\uffa0\026\143\027\144\064\uffa0\001\002\000\036\011" +
    "\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1" +
    "\020\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1\064" +
    "\uffa1\001\002\000\004\004\160\001\002\000\026\004\071" +
    "\005\110\006\107\007\101\010\104\025\064\037\105\040" +
    "\102\041\103\043\065\001\002\000\050\011\uff94\012\uff94" +
    "\013\uff94\014\uff94\015\uff94\016\uff94\017\uff94\020\uff94\021" +
    "\uff94\022\uff94\023\uff94\024\uff94\025\uff94\026\uff94\027\uff94" +
    "\063\uff94\064\uff94\065\uff94\066\uff94\001\002\000\042\011" +
    "\uff99\012\uff99\013\uff99\014\uff99\015\uff99\016\uff99\017\uff99" +
    "\020\uff99\021\uff99\022\uff99\023\uff99\024\uff99\025\uff99\026" +
    "\uff99\027\uff99\064\uff99\001\002\000\050\011\uff97\012\uff97" +
    "\013\uff97\014\uff97\015\uff97\016\uff97\017\uff97\020\uff97\021" +
    "\uff97\022\uff97\023\uff97\024\uff97\025\uff97\026\uff97\027\uff97" +
    "\063\151\064\uff97\065\150\066\152\001\002\000\042\011" +
    "\uff98\012\uff98\013\uff98\014\uff98\015\uff98\016\uff98\017\uff98" +
    "\020\uff98\021\uff98\022\uff98\023\uff98\024\uff98\025\uff98\026" +
    "\uff98\027\uff98\064\uff98\001\002\000\004\064\157\001\002" +
    "\000\050\011\uff96\012\uff96\013\uff96\014\uff96\015\uff96\016" +
    "\uff96\017\uff96\020\uff96\021\uff96\022\uff96\023\uff96\024\uff96" +
    "\025\uff96\026\uff96\027\uff96\063\uff96\064\uff96\065\uff96\066" +
    "\uff96\001\002\000\050\011\uff95\012\uff95\013\uff95\014\uff95" +
    "\015\uff95\016\uff95\017\uff95\020\uff95\021\uff95\022\uff95\023" +
    "\uff95\024\uff95\025\uff95\026\uff95\027\uff95\063\uff95\064\uff95" +
    "\065\uff95\066\uff95\001\002\000\010\013\uffc7\023\uffc7\046" +
    "\162\001\002\000\004\012\004\001\002\000\006\013\uffc8" +
    "\023\uffc8\001\002\000\006\013\uffc9\023\uffc9\001\002\000" +
    "\006\013\uffc6\023\uffc6\001\002\000\004\010\167\001\002" +
    "\000\006\004\172\011\uffbd\001\002\000\004\011\177\001" +
    "\002\000\004\011\uffbe\001\002\000\006\011\uffba\062\174" +
    "\001\002\000\004\011\uffbc\001\002\000\004\004\175\001" +
    "\002\000\006\011\uffba\062\174\001\002\000\004\011\uffbb" +
    "\001\002\000\006\013\uffbf\023\uffbf\001\002\000\006\013" +
    "\uffc4\023\uffc4\001\002\000\006\013\uffc3\023\uffc3\001\002" +
    "\000\006\013\uffc1\023\uffc1\001\002\000\004\013\uffd7\001" +
    "\002\000\026\012\004\030\037\045\062\047\040\051\047" +
    "\052\044\053\053\054\051\055\054\057\060\001\002\000" +
    "\006\013\uffd5\023\204\001\002\000\004\013\uffd6\001\002" +
    "\000\006\013\uffc0\023\uffc0\001\002\000\014\002\uffff\013" +
    "\uffff\023\uffff\031\uffff\046\uffff\001\002\000\004\012\004" +
    "\001\002\000\006\013\uffc5\023\uffc5\001\002\000\006\013" +
    "\uffca\023\uffca\001\002\000\006\004\216\063\215\001\002" +
    "\000\004\005\217\001\002\000\006\023\ufff5\031\ufff5\001" +
    "\002\000\004\064\220\001\002\000\010\004\uffe0\061\uffe0" +
    "\063\uffe0\001\002\000\010\004\uffda\061\uffda\063\uffda\001" +
    "\002\000\004\031\ufffc\001\002\000\022\004\015\032\027" +
    "\033\013\034\011\042\016\044\010\056\031\066\030\001" +
    "\002\000\006\023\223\031\ufffa\001\002\000\004\031\ufffb" +
    "\001\002\000\006\023\ufff6\031\ufff6\001\002\000\004\010" +
    "\231\001\002\000\004\012\004\001\002\000\020\004\015" +
    "\011\ufff1\032\027\033\013\034\011\042\016\066\030\001" +
    "\002\000\004\011\245\001\002\000\010\004\uffeb\061\242" +
    "\063\215\001\002\000\004\011\ufff2\001\002\000\006\011" +
    "\uffee\062\236\001\002\000\016\004\015\032\027\033\013" +
    "\034\011\042\016\066\030\001\002\000\004\011\ufff0\001" +
    "\002\000\006\011\uffee\062\236\001\002\000\004\011\uffef" +
    "\001\002\000\004\004\uffec\001\002\000\004\004\244\001" +
    "\002\000\006\011\uffed\062\uffed\001\002\000\004\012\ufff3" +
    "\001\002\000\006\023\ufff4\031\ufff4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\006\002\004\003\005\001\001\000\032\004" +
    "\031\005\032\006\023\007\024\010\011\011\017\040\022" +
    "\041\021\042\020\043\013\044\016\045\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\052\221\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\041\220\042\020\043\013\045\025\001\001\000\016" +
    "\040\213\041\021\042\020\043\013\044\016\045\025\001" +
    "\001\000\036\003\051\012\040\013\041\014\045\015\047" +
    "\016\056\021\044\022\062\023\054\024\035\025\055\026" +
    "\060\027\042\030\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\051" +
    "\212\057\077\061\076\064\075\067\074\072\073\075\072" +
    "\076\105\077\071\102\067\103\066\001\001\000\030\051" +
    "\210\057\077\061\076\064\075\067\074\072\073\075\072" +
    "\076\105\077\071\102\067\103\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\051\206" +
    "\057\077\061\076\064\075\067\074\072\073\075\072\076" +
    "\105\077\071\102\067\103\066\001\001\000\002\001\001" +
    "\000\004\055\202\001\001\000\030\051\201\057\077\061" +
    "\076\064\075\067\074\072\073\075\072\076\105\077\071" +
    "\102\067\103\066\001\001\000\002\001\001\000\030\051" +
    "\200\057\077\061\076\064\075\067\074\072\073\075\072" +
    "\076\105\077\071\102\067\103\066\001\001\000\002\001" +
    "\001\000\030\051\177\057\077\061\076\064\075\067\074" +
    "\072\073\075\072\076\105\077\071\102\067\103\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\051\065\057\077\061\076\064\075\067\074\072\073" +
    "\075\072\076\105\077\071\102\067\103\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\160\001\001\000\002\001\001\000\006\100\152\101" +
    "\153\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\073\144\074\141\001\001\000\004\071\140\001\001\000" +
    "\004\065\131\001\001\000\006\062\121\063\122\001\001" +
    "\000\004\060\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\057\111" +
    "\061\076\064\075\067\074\072\073\075\072\076\105\077" +
    "\071\102\067\103\066\001\001\000\002\001\001\000\014" +
    "\075\110\076\105\077\071\102\067\103\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\061" +
    "\115\064\075\067\074\072\073\075\072\076\105\077\071" +
    "\102\067\103\066\001\001\000\004\060\116\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\064\127\067\074\072\073\075\072\076" +
    "\105\077\071\102\067\103\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\062\130\063\122\001\001\000\002\001\001\000\004" +
    "\066\134\001\001\000\020\067\133\072\073\075\072\076" +
    "\105\077\071\102\067\103\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\067\136\072\073\075\072\076" +
    "\105\077\071\102\067\103\066\001\001\000\004\066\137" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\075" +
    "\145\076\105\077\071\102\067\103\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\073" +
    "\146\074\141\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\051\155\057\077\061\076\064\075\067\074\072" +
    "\073\075\072\076\105\077\071\102\067\103\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\100\154\101" +
    "\153\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\162\020\163\001" +
    "\001\000\004\003\164\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\031" +
    "\167\032\170\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\056\172\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\056\175\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\003\051\014\204\015\047" +
    "\016\056\021\044\022\062\023\054\024\035\025\055\026" +
    "\060\027\042\030\034\001\001\000\004\055\205\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\211\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\006\223\007\024\010\011\011\017\040" +
    "\022\041\021\042\020\043\013\044\016\045\025\001\001" +
    "\000\004\052\224\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\227\001\001\000\004\003\245\001\001" +
    "\000\024\034\231\035\233\036\234\040\232\041\021\042" +
    "\020\043\013\044\016\045\025\001\001\000\002\001\001" +
    "\000\004\037\242\001\001\000\002\001\001\000\004\053" +
    "\236\001\001\000\020\036\237\040\232\041\021\042\020" +
    "\043\013\044\016\045\025\001\001\000\002\001\001\000" +
    "\004\053\240\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$asint/AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$asint/AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$asint/AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 
  return getScanner().next_token(); 

    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$asint/AnalizadorSintacticoTiny$actions {
  private final asint/AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$asint/AnalizadorSintacticoTiny$actions(asint/AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$asint/AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$asint/AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$asint/AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$asint/AnalizadorSintacticoTiny$stack,
    int                        CUP$asint/AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$asint/AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$asint/AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= bloque 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("programa",0, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$asint/AnalizadorSintacticoTiny$stack.elementAt(CUP$asint/AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$asint/AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bloque ::= LLAVEAP declar_opt intr_opt LLAVECIERRE 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("bloque",1, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declar_opt ::= declaraciones FINDECLAR 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declar_opt",2, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declar_opt ::= 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declar_opt",2, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaraciones ::= declaracion R1 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaraciones",3, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // R1 ::= PCOMA declaracion R1 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("R1",40, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // R1 ::= 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("R1",40, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion ::= declar_var 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaracion",4, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion ::= declar_tipo 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaracion",4, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracion ::= declar_proc 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaracion",4, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declar_var ::= tipo_0 IDEN 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declar_var",5, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declar_tipo ::= P_TYPE tipo_0 IDEN 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declar_tipo",6, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declar_proc ::= P_PROC IDEN param_formales bloque 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declar_proc",7, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // param_formales ::= PAP lista_param_form_opt PCIERRE 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("param_formales",25, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lista_param_form_opt ::= lista_param_form 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_param_form_opt",26, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lista_param_form_opt ::= 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_param_form_opt",26, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lista_param_form ::= param_formal R2 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_param_form",27, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // R2 ::= COMA param_formal R2 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("R2",41, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // R2 ::= 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("R2",41, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // param_formal ::= tipo_0 ref_opt IDEN 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("param_formal",28, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ref_opt ::= AND 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ref_opt",29, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ref_opt ::= 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ref_opt",29, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipo_0 ::= array 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo_0",30, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipo_0 ::= tipo_1 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo_0",30, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipo_1 ::= puntero 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo_1",31, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tipo_1 ::= tipo_2 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo_1",31, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tipo_2 ::= IDEN 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo_2",32, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipo_2 ::= tipo_basico 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo_2",32, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipo_basico ::= P_INT 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo_basico",33, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipo_basico ::= P_REAL 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo_basico",33, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipo_basico ::= P_BOOL 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo_basico",33, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipo_basico ::= P_STRING 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo_basico",33, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // array ::= tipo_0 CORCHETEAP ENT CORCHETECIERRE 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("array",34, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // struct ::= LLAVEAP campos_struct LLAVECIERRE 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("struct",36, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // campos_struct ::= campo_struct R3 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("campos_struct",37, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // R3 ::= COMA campo_struct R3 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("R3",42, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // R3 ::= 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("R3",42, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // campo_struct ::= tipo_0 IDEN 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("campo_struct",38, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // puntero ::= EXPONENTE tipo_1 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("puntero",35, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // intr_opt ::= lista_intr 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("intr_opt",8, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // intr_opt ::= 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("intr_opt",8, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // lista_intr ::= instruccion R4 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_intr",9, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // R4 ::= PCOMA instruccion R4 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("R4",43, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // R4 ::= 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("R4",43, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instruccion ::= instruccion_eval 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",10, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // instruccion ::= instruccion_if 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",10, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // instruccion ::= instruccion_while 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",10, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // instruccion ::= instruccion_read 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",10, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // instruccion ::= instruccion_write 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",10, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // instruccion ::= instruccion_nl 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",10, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // instruccion ::= instruccion_new 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",10, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // instruccion ::= instruccion_delete 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",10, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // instruccion ::= instruccion_call 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",10, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // instruccion ::= instruccion_compuesta 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",10, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // instruccion_eval ::= INIEVAL expresion 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion_eval",11, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // instruccion_if ::= P_IF expresion bloque instruccion_else_opt 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion_if",12, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // instruccion_else_opt ::= instruccion_else 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion_else_opt",14, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // instruccion_else_opt ::= 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion_else_opt",14, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // instruccion_else ::= P_ELSE bloque 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion_else",13, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // instruccion_while ::= P_WHILE expresion bloque 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion_while",15, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // instruccion_read ::= P_READ expresion 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion_read",16, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // instruccion_write ::= P_WRITE expresion 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion_write",17, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // instruccion_nl ::= P_NL 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion_nl",18, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // instruccion_new ::= P_NEW expresion 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion_new",19, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // instruccion_delete ::= P_DELETE expresion 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion_delete",20, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // instruccion_call ::= P_CALL IDEN PAP lista_param_real_opt PCIERRE 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion_call",21, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // lista_param_real_opt ::= lista_param_real 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_param_real_opt",23, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // lista_param_real_opt ::= 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_param_real_opt",23, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // lista_param_real ::= IDEN R5 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_param_real",24, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // R5 ::= COMA IDEN R5 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("R5",44, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // R5 ::= 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("R5",44, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // instruccion_compuesta ::= bloque 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion_compuesta",22, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresion ::= E0 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("expresion",39, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E0 ::= E1 RE0 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",45, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // RE0 ::= IGUAL E1 RE0 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RE0",46, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // RE0 ::= 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RE0",46, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E1 ::= E2 RE1 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",47, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // RE1 ::= OP1 E2 RE1 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RE1",48, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // RE1 ::= 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RE1",48, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OP1 ::= LT 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",49, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OP1 ::= LEQ 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",49, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OP1 ::= GT 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",49, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OP1 ::= GEQ 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",49, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OP1 ::= COMP 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",49, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OP1 ::= DIST 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",49, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E2 ::= E3 FE2 RE2 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",50, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // FE2 ::= MENOS E3 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FE2",51, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // FE2 ::= 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FE2",51, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // RE2 ::= MAS E3 RE2 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RE2",52, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // RE2 ::= 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RE2",52, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // E3 ::= E4 RE3 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",53, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // FE3 ::= P_AND E3 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FE3",54, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // FE3 ::= P_OR E4 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FE3",54, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // RE3 ::= 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RE3",55, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // E4 ::= E5 RE4 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",56, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // RE4 ::= OP4 E5 RE4 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RE4",57, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // RE4 ::= 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RE4",57, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OP4 ::= MUL 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP4",58, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OP4 ::= DIV 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP4",58, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // E5 ::= OP5 E5 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",59, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // E5 ::= E6 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",59, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OP5 ::= MENOS 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP5",60, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OP5 ::= P_NOT 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP5",60, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // E6 ::= E7 RE6 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",61, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // RE6 ::= OP6 RE6 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RE6",62, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // RE6 ::= 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RE6",62, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OP6 ::= CORCHETEAP expresion CORCHETECIERRE 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP6",63, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OP6 ::= PUNTO IDEN 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP6",63, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OP6 ::= EXPONENTE 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP6",63, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // E7 ::= ENT 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",64, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // E7 ::= REAL 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",64, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // E7 ::= P_TRUE 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",64, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // E7 ::= P_FALSE 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",64, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // E7 ::= STRING 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",64, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // E7 ::= IDEN 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",64, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // E7 ::= P_NULL 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",64, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // E7 ::= E8 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",64, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // E8 ::= PAP E0 PCIERRE 
            {
              Object RESULT =null;

              CUP$asint/AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",65, RESULT);
            }
          return CUP$asint/AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$asint/AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$asint/AnalizadorSintacticoTiny$do_action(
    int                        CUP$asint/AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$asint/AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$asint/AnalizadorSintacticoTiny$stack,
    int                        CUP$asint/AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$asint/AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$asint/AnalizadorSintacticoTiny$act_num,
                               CUP$asint/AnalizadorSintacticoTiny$parser,
                               CUP$asint/AnalizadorSintacticoTiny$stack,
                               CUP$asint/AnalizadorSintacticoTiny$top);
    }
}

