package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;

scan with {: 
  return getScanner().next_token(); 
:};
parser code {: 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }
:};
init with {: 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);
:};


terminal     IDEN, ENT, REAL, STRING, 
             PAP, PCIERRE, 
             LLAVEAP, LLAVECIERRE,
             LT, LEQ, GT, GEQ,
             COMP, DIST, IGUAL,
             PCOMA,
             MAS, MENOS, MUL, DIV,
             INIEVAL, FINDECLAR,
             P_INT, P_REAL, P_BOOL,
             P_AND, P_OR, P_NOT,
             P_TRUE, P_FALSE,
             P_STRING, P_NULL, P_PROC,
             P_IF, P_ELSE, P_WHILE,
             P_STRUCT,
             P_NEW, P_DELETE,
             P_READ, P_WRITE,
             P_NL, P_TYPE, P_CALL,
             PORCENTAJE, AND,
             COMA,
             CORCHETEAP,CORCHETECIERRE, 
             PUNTO, EXPONENTE,
             O_EOF ;


non terminal	programa, bloque, 
		
				declar_opt, declaraciones, declaracion, 
				declar_var, declar_tipo, declar_proc,
		
				intr_opt, lista_intr, instruccion,
		
				instruccion_eval, instruccion_if , instruccion_else, instruccion_else_opt, instruccion_while , instruccion_read , instruccion_write , instruccion_nl , instruccion_new , instruccion_delete , instruccion_call , instruccion_compuesta , 
	
				lista_param_real_opt, lista_param_real,

				param_formales, lista_param_form_opt, lista_param_form, param_formal, ref_opt,

				tipo_0, tipo_1, tipo_2, tipo_basico,

				array, puntero, struct, campos_struct, campo_struct,

				expresion,

				R1, R2, R3, R4, R5,

				E0, RE0, 
				E1, RE1, OP1,
				E2, FE2, RE2,
				E3, FE3, RE3,
				E4, RE4, OP4,
				E5, OP5,
				E6, RE6, OP6,
				E7,
				E8;

programa				::= bloque ;
bloque					::= LLAVEAP declar_opt intr_opt LLAVECIERRE ;
declar_opt				::= declaraciones FINDECLAR ;
declar_opt				::= ;
declaraciones			::= declaracion R1 ;
R1						::= PCOMA declaracion R1 ;
R1						::= ;
declaracion				::= declar_var ;
declaracion				::= declar_tipo ;
declaracion				::= declar_proc ;
declar_var				::= tipo_0 IDEN ; 
declar_tipo				::= P_TYPE tipo_0 IDEN ; 
declar_proc				::= P_PROC IDEN param_formales bloque ; 
param_formales			::= PAP lista_param_form_opt PCIERRE ;
lista_param_form_opt	::= lista_param_form ;
lista_param_form_opt	::= ;
lista_param_form		::= param_formal R2 ;
R2						::= COMA param_formal R2 ;
R2						::= ;
param_formal			::= tipo_0 ref_opt IDEN ;
ref_opt					::= AND ;
ref_opt					::= ;
tipo_0					::= array ;


tipo_0					::= tipo_1 ;
tipo_1					::= puntero ;
tipo_1					::= tipo_2 ;
tipo_2					::= IDEN ;
tipo_2					::= tipo_basico ;
tipo_basico				::= P_INT ;
tipo_basico				::= P_REAL ;
tipo_basico				::= P_BOOL ;
tipo_basico				::= P_STRING ;
array					::= tipo_0 CORCHETEAP ENT CORCHETECIERRE ;
struct					::= LLAVEAP campos_struct LLAVECIERRE ;
campos_struct			::= campo_struct R3 ;
R3						::= COMA campo_struct R3 ;
R3						::= ;
campo_struct			::= tipo_0 IDEN ;
puntero					::= EXPONENTE tipo_1 ;


intr_opt				::= lista_intr ;
intr_opt				::= ;
lista_intr				::= instruccion R4 ;
R4						::= PCOMA instruccion R4 ;
R4						::= ;

instruccion				::= instruccion_eval ;
instruccion				::= instruccion_if ;
instruccion				::= instruccion_while ;
instruccion				::= instruccion_read ;
instruccion				::= instruccion_write ;
instruccion				::= instruccion_nl ;
instruccion				::= instruccion_new ;
instruccion				::= instruccion_delete ;
instruccion				::= instruccion_call ;
instruccion				::= instruccion_compuesta ; 

instruccion_eval		::= INIEVAL expresion ;
instruccion_if			::= P_IF expresion bloque instruccion_else_opt ;
instruccion_else_opt	::= instruccion_else;
instruccion_else_opt	::= ;
instruccion_else		::= P_ELSE bloque ;
instruccion_while		::= P_WHILE expresion bloque ;
instruccion_read		::= P_READ expresion ;
instruccion_write		::= P_WRITE expresion ;
instruccion_nl			::= P_NL ;
instruccion_new			::= P_NEW expresion ;
instruccion_delete		::= P_DELETE expresion ;
instruccion_call		::= P_CALL IDEN PAP lista_param_real_opt PCIERRE ;
lista_param_real_opt	::= lista_param_real ;
lista_param_real_opt	::= ;
lista_param_real		::= IDEN R5 ;
R5						::= COMA IDEN R5 ;
R5						::= ;
instruccion_compuesta	::= bloque ;


expresion				::= E0;

E0 						::= E1 RE0;
RE0						::= IGUAL E1 RE0;
RE0						::= ;
						
E1 						::= E2 RE1;
RE1						::= OP1 E2 RE1;
RE1						::= ;
OP1						::= LT;
OP1						::= LEQ;
OP1						::= GT;
OP1						::= GEQ;
OP1						::= COMP;
OP1						::= DIST;
						
E2 						::= E3 FE2 RE2;
FE2						::= MENOS E3;
FE2						::= ;
RE2						::= MAS E3 RE2;
RE2						::= ;
						
E3 						::= E4 RE3;
FE3						::= P_AND E3;
FE3						::= P_OR E4;
RE3						::= ;
						
E4 						::= E5 RE4;
RE4						::= OP4 E5 RE4;
RE4						::= ;
OP4						::= MUL;
OP4						::= DIV;
						
E5 						::= OP5 E5;
E5 						::= E6;
OP5						::= MENOS;
OP5						::= P_NOT;
						
E6 						::= E7 RE6;
RE6						::= OP6 RE6;
RE6						::= ;
OP6						::= CORCHETEAP expresion CORCHETECIERRE;
OP6						::= PUNTO IDEN;
OP6						::= EXPONENTE;
						
E7 						::= ENT;
E7 						::= REAL;
E7 						::= P_TRUE;
E7 						::= P_FALSE;
E7 						::= STRING;
E7 						::= IDEN;
E7 						::= P_NULL;
E7 						::= E8;
						
E8 						::= PAP E0 PCIERRE;
