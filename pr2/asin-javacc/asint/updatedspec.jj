options  {
  STATIC=false;
  DEBUG_PARSER=true;
}  
PARSER_BEGIN(AnalizadorSintacticoTiny)
package asint;

public class AnalizadorSintacticoTiny {
    protected void newToken(Token t) {}
}
PARSER_END(AnalizadorSintacticoTiny)

  TOKEN:{<#letra:["a"-"z","A"-"Z"]>}
  TOKEN:{<#digitoPositivo:["1"-"9"]>}
  TOKEN:{<#digito:<digitoPositivo>|"0">} 
  TOKEN:{<#parteEntera:<digitoPositivo> (<digito>)* |"0">} 
  TOKEN:{<#parteDecimal: (<digito>)* <digitoPositivo> | "0">}
  TOKEN:{<#parteExponencial: ("e"|"E") <parteEntera>>}
  SKIP:{<["\t"," ","\r","\b","\n"]>}  
  SKIP:{<"##"(~["\n"])*>}  

  TOKEN: {<donde:"donde">}
  TOKEN: {<evalua:"evalua">}
  TOKEN: {<int:"int"|"INT">}
  TOKEN: {<real:"real"|"REAL">}
  TOKEN: {<bool:"bool"|"BOOL">}
  TOKEN: {<and:"and"|"AND">}
  TOKEN: {<or:"or"|"OR">}
  TOKEN: {<not:"not"|"NOT">}
  TOKEN: {<string:"string"|"STRING">}
  TOKEN: {<null:"null"|"NULL">}
  TOKEN: {<true:"true"|"TRUE">}
  TOKEN: {<false:"false"|"FALSE">}
  TOKEN: {<proc:"proc"|"PROC">}
  TOKEN: {<if:"if"|"IF">}
  TOKEN: {<else:"else"|"ELSE">}
  TOKEN: {<while:"while"|"WHILE">}
  TOKEN: {<struct:"struct"|"STRUCT">}
  TOKEN: {<new:"new"|"NEW">}
  TOKEN: {<delete:"delete"|"DELETE">}
  TOKEN: {<read:"read"|"READ">}
  TOKEN: {<write:"write"|"WRITE">}
  TOKEN: {<nl:"nl"|"NL">}
  TOKEN: {<type:"type"|"TYPE">}
  TOKEN: {<call:"call"|"CALL">}

  TOKEN:{<iden:<letra>(<letra>|<digito>)*>}
  TOKEN:{<lit_ent:(["+","-"])?<parteEntera>>}
  TOKEN:{<lit_real:(["+","-"])?<parteEntera>(<parteExponencial> | "."<parteDecimal> | "."<parteDecimal><parteExponencial>)>}
  TOKEN:{<cadena: "\"" (~["\""])* "\"">}

  void analiza()   : {} {programa() <EOF> }
  void programa()  : {} {bloque()}
  void bloque(): {} { "{" declar_opt() instr_opt() "}" }

  void declar_opt() : {} {lista_declaraciones() "&&" | {}}
  void lista_declaraciones() : {} {declaracion() rlista_decs()}
  void rlista_decs() : {} {";" declaracion() rlista_decs() | {}}
  void declaracion(): {} {declaracion_variable() | declaracion_tipo() | declaracion_proc()}

  void declaracion_variable(): {} {tipo_0 <iden>}
  void declaracion_tipo(): {} {<type> tipo_0 <iden>}
  void declaracion_proc(): {} {<proc> <iden> param_formales() bloque()}

  void param_formales(): {} {lista_params() | {}}
  void lista_params(): {} {parametro() rlista_param()}
  void rlista_param(): {} {"," parametro() rlista_param() | {}}
  void parametro(): {} {tipo_0() ref_op() <iden>}
  void ref_op(): {} {"&" | {}}
  void tipo_0() : {} {array() | tipo_1()}
  void tipo_1() : {} {puntero() | tipo_2()}
  void tipo_2() : {} {<iden> | tipo_basico() | struct()}
  void tipo_basico(): {} {<int> | <real> | <bool> | <string>}
  void array(): {} {tipo_0() "[" <lit_ent> "]"}
  void struct(): {} { campos_struct() }
  void campos_struct(): {} {lista_campos_struct | {}}
  void lista_campos_struct(): {campo_struct() rlista_campo_struct()}
  void rlista_campo_struct(): {} {"," campo_struct() rlista_campo_struct() | {}}
  void campo_struct(): {} {tipo_0() <iden>}
  void puntero(): {} {"^" tipo_1()}

  void instr_opt() : {} {lista_instrucciones() | {}}
  void lista_instrucciones() : {} {instruccion() rlista_instrs()}
  void rlista_instrs() : {} {";" instruccion() rlista_instrs() | {}}
  void instruccion() : {} {instruccion_eval() | instruccion_if() | instruccion_while() | instruccion_proc() | instruccion_read() | instruccion_write() | instruccion_nl() | instruccion_new() | instruccion_delete() | instruccion_call() | instruccion_compuesta()}
  void instruccion_eval(): {} {"@" expresion()}
  void instruccion_if(): {} {<if> expresion() bloque() instruccion_else_opt()}
  void instruccion_else_opt(): {} {instruccion_else() | {}}
  void instruccion_else(): {} {<else> bloque()}
  void instruccion_while(): {} {<while> expresion() bloque()}
  void instruccion_read(): {} {<read> expresion()}
  void instruccion_write(): {} {<write> expresion()}
  void instruccion_nl(): {} {"\n"}
  void instruccion_new(): {} {<new> expresion()}
  void instruccion_delete(): {} {<delete> expresion()}
  void instruccion_call(): {} {<call> <iden> "(" params_reales() ")"}
  void params_reales(): {} {lista_params_reales() | {}}
  void lista_params_reales(): {} {param_real() rlista_params_reales()}
  void rlista_params_reales(): {} {"," param_real() rlista_params_reales() | {}}
  void param_real(): {} {<iden>}
  void instruccion_compuesta(): {} {bloque()}


  void e0(): {} {e1() e0'()}
  void e0'(): {} {"=" e0() | {}}
  void e1(): {} {e2() e1'()}
  void e1'(): {} {op1() e2() e1'() | {}}
  void e2(): {} {e3() e2'()}
  void e2'(): {} {"+" e3() e2'() | "-" e3() | {}}
  void e3(): {} {e4() e3'()}
  void e3'(): {} {<and> e3() | <or> e4() | {}}
  void e4(): {} {e5() e4'()}
  void e4'(): {} {op4() e5() e4'() | {}}
  void e5(): {} {op5() e5() | e6()}
  void e6(): {} {e7() e6'()}
  void e6'(): {} {op6() e6'() | {}}
  void e7(): {} {<lit_ent> | <lit_real> | booleano() | <cadena> | <iden> | <null>}
  void booleano(): {} {<true> | <false>}
  void e8(): { "(" e0() ")" }
  void op1(): {} {"==" | "<" | ">" | ">=" | "<="}
  void op4(): {} {"*" | "/" | "%"}
  void op5(): {} {"-" | <not>}
  void op6(): {} { "[" expresion() "]" | "." <iden> | "^"}



















  
