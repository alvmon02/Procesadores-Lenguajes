package c_ast_ascendente;

import java_cup.runtime.*;

import asint.ClaseSemanticaTiny;
import asint.SintaxisAbstractaTiny.*;
import c_ast_ascendente.UnidadLexica.StringLocalizado;

import c_ast_ascendente.AnalizadorLexicoTiny;
import c_ast_ascendente.UnidadLexica;
import c_ast_ascendente.GestionErroresTiny;

scan with {: 
  return getScanner().next_token(); 
:};
parser code {: 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }
:};
init with {: 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);
:};
action code {:
  ClaseSemanticaTiny sem = new ClaseSemanticaTiny();
:}

terminal StringLocalizado PAP, PCIERRE, 
             LLAVEAP, LLAVECIERRE,
             LT, LEQ, GT, GEQ,
             COMP, DIST, IGUAL,
             PCOMA,
             MAS, MENOS, MUL, DIV,
             INIEVAL, FINDECLAR,
             P_INT, P_REAL, P_BOOL,
             P_AND, P_OR, P_NOT,
             P_TRUE, P_FALSE,
             P_STRING, P_NULL, P_PROC,
             P_IF, P_ELSE, P_WHILE,
             P_STRUCT,
             P_NEW, P_DELETE,
             P_READ, P_WRITE,
             P_NL, P_TYPE, P_CALL,
             PORCENTAJE, AND,
             COMA,
             CORCHETEAP,CORCHETECIERRE, 
             PUNTO, EXPONENTE,  IDEN, ENT, REAL, STRING;

non terminal Prog programa;
non terminal Bloque bloque;
non terminal DecsOpt declar_opt;
non terminal LDecs declaraciones;
non terminal Dec declaracion, declar_var, declar_tipo, declar_proc;
non terminal PForms lista_param_form_opt;
non terminal LPForms lista_param_form;
non terminal PForm param_formal;
non terminal Ref ref_opt;
non terminal Tipo tipo_0, tipo_1, tipo_2, tipo_basico, array, puntero, struct;
non terminal CamposS campos_struct;
non terminal CampoS campo_struct;

non terminal IntrsOpt intr_opt;
non terminal LIntrs lista_intr;
non terminal Intr instruccion, instruccion_eval, instruccion_if, instruccion_while, instruccion_read, instruccion_write,
                  instruccion_nl, instruccion_new, instruccion_delete, instruccion_call, instruccion_compuesta;
non terminal I_Else instruccion_else_opt;
non terminal PReals lista_param_real_opt;
non terminal LPReals lista_param_real;
non terminal Exp expresion, E0, E1, E2, E3, E4, E5, E6, E7, E8;
non terminal StringLocalizado OP1, OP4, OP5;

start with programa;

programa				      ::= bloque: bloq
    {: RESULT = sem.prog(bloq); :};
bloque					      ::= LLAVEAP declar_opt: decs intr_opt: intrs LLAVECIERRE
    {: RESULT = sem.bloque(decs, intrs); :};

declar_opt				    ::= declaraciones: decs FINDECLAR
    {: RESULT = sem.si_decs(decs); :};
declar_opt				    ::= 
    {: RESULT = sem.no_decs(); :};

declaraciones			    ::= declaraciones: decs PCOMA declaracion: dec
    {: RESULT = sem.mas_decs(decs, dec); :};
declaraciones			    ::= declaracion: dec
    {: RESULT = sem.una_dec(dec); :};

declaracion				    ::= declar_var: d_var
    {: RESULT = d_var; :};
declaracion				    ::= declar_tipo: d_tipo
    {: RESULT = d_tipo; :};
declaracion				    ::= declar_proc: d_proc
    {: RESULT = d_proc; :};

declar_var				    ::= tipo_0: tipo IDEN: id
    {: RESULT = (Dec)sem.dec_var(tipo, id.str()).ponFila(id.fila()).ponCol(id.col()); :};
declar_tipo				    ::= P_TYPE tipo_0: tipo IDEN: id
    {: RESULT = (Dec)sem.dec_tipo(tipo, id.str()).ponFila(id.fila()).ponCol(id.col()); :};
declar_proc				    ::= P_PROC IDEN: id PAP lista_param_form_opt: pforms PCIERRE bloque: prog
    {: RESULT = (Dec)sem.dec_proc(id.str(), pforms, prog).ponFila(id.fila()).ponCol(id.col()); :};

lista_param_form_opt	::= lista_param_form: pforms
    {: RESULT = sem.si_pforms(pforms); :};
lista_param_form_opt	::= 
    {: RESULT = sem.no_pforms(); :};
lista_param_form		  ::= lista_param_form: pforms COMA param_formal: pform
    {: RESULT = sem.mas_pforms(pforms, pform); :};
lista_param_form		  ::= param_formal: pform
    {: RESULT = sem.una_pform(pform); :};
param_formal			    ::= tipo_0: tipo ref_opt: ref IDEN: id
    {: RESULT = (PForm)sem.pform(tipo, ref, id.str()).ponFila(id.fila()).ponCol(id.col()); :};
ref_opt					      ::= AND
    {: RESULT = sem.si_ref(); :};
ref_opt					      ::= 
    {: RESULT = sem.no_ref(); :};

tipo_0					      ::= array: arr
    {: RESULT = arr; :};
tipo_0					      ::= tipo_1: tipo
    {: RESULT = tipo; :};
tipo_1					      ::= puntero: punt
    {: RESULT = punt; :};
tipo_1					      ::= tipo_2: tipo
    {: RESULT = tipo; :};
tipo_2					      ::= IDEN: id
    {: RESULT = (Tipo)sem.t_iden(id.str()).ponFila(id.fila()).ponCol(id.col()); :};
tipo_2					      ::= tipo_basico: tipo
    {: RESULT = tipo; :};
tipo_2                ::= struct: strct
    {: RESULT = strct; :};
tipo_basico				    ::= P_INT
    {: RESULT = sem.t_int(); :};
tipo_basico				    ::= P_REAL
    {: RESULT = sem.t_real(); :};
tipo_basico				    ::= P_BOOL
    {: RESULT = sem.t_bool(); :};
tipo_basico				    ::= P_STRING
    {: RESULT = sem.t_string(); :};

array                           ::= tipo_0: tipo CORCHETEAP ENT: ent CORCHETECIERRE
    {: RESULT = (Tipo)sem.t_array(tipo, ent.str()).ponFila(ent.fila()).ponCol(ent.col()); :};
struct					        ::= P_STRUCT LLAVEAP campos_struct: camposs LLAVECIERRE
    {: RESULT = sem.t_struct(camposs); :};
campos_struct			        ::= campos_struct: camposs COMA campo_struct: campos
    {: RESULT = sem.mas_cmp_s(camposs, campos); :};
campos_struct			        ::= campo_struct: campos
    {: RESULT = sem.un_cmp_s(campos); :};
campo_struct			        ::= tipo_0: tipo IDEN: id
    {: RESULT = (CampoS)sem.cmp_s(tipo, id.str()).ponFila(id.fila()).ponCol(id.col()); :};
puntero					        ::= EXPONENTE tipo_1: tipo
    {: RESULT = sem.t_punter(tipo); :};


intr_opt				::= lista_intr: intrs
    {: RESULT = sem.si_intrs(intrs); :};
intr_opt				::= 
    {: RESULT = sem.no_intrs(); :};
lista_intr				::= lista_intr: intrs PCOMA instruccion: intr
    {: RESULT = sem.mas_intrs(intrs, intr); :};
lista_intr				::= instruccion: intr
    {: RESULT = sem.una_intr(intr); :};

instruccion				::= instruccion_eval: intr
    {: RESULT = intr; :};
instruccion				::= instruccion_if: intr
    {: RESULT = intr; :};
instruccion				::= instruccion_while: intr
    {: RESULT = intr; :};
instruccion				::= instruccion_read: intr
    {: RESULT = intr; :};
instruccion				::= instruccion_write: intr
    {: RESULT = intr; :};
instruccion				::= instruccion_nl: intr
    {: RESULT = intr; :};
instruccion				::= instruccion_new: intr
    {: RESULT = intr; :};
instruccion				::= instruccion_delete: intr
    {: RESULT = intr; :};
instruccion				::= instruccion_call: intr
    {: RESULT = intr; :};
instruccion				::= instruccion_compuesta : intr
    {: RESULT = intr; :};

instruccion_eval		::= INIEVAL expresion: exp
    {: RESULT = sem.i_eval(exp); :};
instruccion_if			::= P_IF expresion: exp bloque: prog instruccion_else_opt: ielse
    {: RESULT = sem.i_if(exp, prog, ielse); :};
instruccion_else_opt	::= P_ELSE bloque: prog
    {: RESULT = sem.si_else(prog); :};
instruccion_else_opt	::=
    {: RESULT = sem.no_else(); :};
instruccion_while		::= P_WHILE expresion: exp bloque: prog
    {: RESULT = sem.i_while(exp, prog); :};
instruccion_read		::= P_READ expresion: exp
    {: RESULT = sem.i_read(exp); :};
instruccion_write		::= P_WRITE expresion: exp
    {: RESULT = sem.i_write(exp); :};
instruccion_nl			::= P_NL
    {: RESULT = sem.i_nl(); :};
instruccion_new			::= P_NEW expresion: exp
    {: RESULT = sem.i_new(exp); :};
instruccion_delete		::= P_DELETE expresion: exp
    {: RESULT = sem.i_delete(exp); :};
instruccion_call		::= P_CALL IDEN: id PAP lista_param_real_opt: preals PCIERRE
    {: RESULT = (Intr)sem.i_call(id.str(), preals).ponFila(id.fila()).ponCol(id.col()); :};
lista_param_real_opt	::= lista_param_real: preals
    {: RESULT = sem.si_preals(preals); :};
lista_param_real_opt	::=
    {: RESULT = sem.no_preals(); :};
lista_param_real		::= lista_param_real: preals COMA expresion: exp
    {: RESULT = sem.mas_preals(preals, exp); :};
lista_param_real		::= expresion: exp
    {: RESULT = sem.un_preals(exp); :};
instruccion_compuesta	::= bloque: prog
    {: RESULT = sem.i_prog(prog); :};

expresion				::= E0: exp
    {: RESULT = exp; :};

E0 						::= E1: opnd0 IGUAL: op E0: opnd1
    {: RESULT = (Exp)sem.e_asig(opnd0, opnd1).ponFila(op.fila()).ponCol(op.col()); :};
E0 						::= E1: exp
    {: RESULT = exp; :};

E1 						::= E1: opnd0 OP1: op E2: opnd1
    {: RESULT = (Exp)sem.mkop(op.str(), opnd0, opnd1).ponFila(op.fila()).ponCol(op.col()); :};
E1 						::= E2: exp
    {: RESULT = exp; :};
OP1						::= LT: op
    {: RESULT = op; :};
OP1						::= LEQ: op
    {: RESULT = op; :};
OP1						::= GT: op
    {: RESULT = op; :};
OP1						::= GEQ: op
    {: RESULT = op; :};
OP1						::= COMP: op
    {: RESULT = op; :};
OP1						::= DIST: op
    {: RESULT = op; :};

E2 						::= E2: opnd0 MAS: op E3: opnd1
    {: RESULT = (Exp)sem.e_suma(opnd0, opnd1).ponFila(op.fila()).ponCol(op.col()); :};
E2 						::= E3: opnd0 MENOS: op E3: opnd1
    {: RESULT = (Exp)sem.e_resta(opnd0, opnd1).ponFila(op.fila()).ponCol(op.col()); :};
E2 						::= E3: exp
    {: RESULT = exp; :};

E3 						::= E4: opnd0 P_AND: op E3: opnd1
    {: RESULT = (Exp)sem.e_and(opnd0, opnd1).ponFila(op.fila()).ponCol(op.col()); :};
E3 						::= E4: opnd0 P_OR: op E4: opnd1
    {: RESULT = (Exp)sem.e_or(opnd0, opnd1).ponFila(op.fila()).ponCol(op.col()); :};
E3 						::= E4: exp
    {: RESULT = exp; :};

E4 						::= E4: opnd0 OP4: op E5: opnd1
    {: RESULT = (Exp)sem.mkop(op.str(), opnd0, opnd1).ponFila(op.fila()).ponCol(op.col()); :};
E4 						::= E5: exp
    {: RESULT = exp; :};
OP4						::= MUL: op
    {: RESULT = op; :};
OP4						::= DIV: op
    {: RESULT = op; :};
OP4						::= PORCENTAJE: op
    {: RESULT = op; :};

E5 						::= OP5: op E5: exp
    {: RESULT = (Exp)sem.mkunary(op.str(), exp).ponFila(op.fila()).ponCol(op.col()); :};
E5 						::= E6: exp
    {: RESULT = exp; :};
OP5						::= MENOS: op
    {: RESULT = op; :};
OP5						::= P_NOT: op
    {: RESULT = op; :};

E6 						::= E6: opnd0 CORCHETEAP: op expresion: opnd1 CORCHETECIERRE
    {: RESULT = (Exp)sem.e_indexado(opnd0, opnd1).ponFila(op.fila()).ponCol(op.col()); :};
E6 						::= E6: opnd PUNTO IDEN: id
    {: RESULT = (Exp)sem.e_campo(opnd, id.str()).ponFila(id.fila()).ponCol(id.col()); :};
E6 						::= E6: opnd EXPONENTE: op
    {: RESULT = (Exp)sem.e_puntero(opnd).ponFila(op.fila()).ponCol(op.col()); :};
E6 						::= E7: exp
    {: RESULT = exp; :};

E7 						::= ENT: ent
    {: RESULT = (Exp)sem.e_lit_ent(ent.str()).ponFila(ent.fila()).ponCol(ent.col()); :};
E7 						::= REAL: real
    {: RESULT = (Exp)sem.e_lit_real(real.str()).ponFila(real.fila()).ponCol(real.col()); :};
E7 						::= P_TRUE: exp
    {: RESULT = (Exp)sem.e_true().ponFila(exp.fila()).ponCol(exp.col()); :};
E7 						::= P_FALSE: exp
    {: RESULT = (Exp)sem.e_false().ponFila(exp.fila()).ponCol(exp.col()); :};
E7 						::= STRING: string
    {: RESULT = (Exp)sem.e_string(string.str()).ponFila(string.fila()).ponCol(string.col()); :};
E7 						::= IDEN: id
    {: RESULT = (Exp)sem.e_iden(id.str()).ponFila(id.fila()).ponCol(id.col()); :};
E7 						::= P_NULL: exp
    {: RESULT = (Exp)sem.e_null().ponFila(exp.fila()).ponCol(exp.col()); :};
E7 						::= E8: exp
    {: RESULT = exp; :};

E8 						::= PAP E0: exp PCIERRE
    {: RESULT = exp; :};