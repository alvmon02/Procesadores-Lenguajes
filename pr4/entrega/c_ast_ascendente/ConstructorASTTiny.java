
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sun Mar 23 23:27:32 CET 2025
//----------------------------------------------------

package c_ast_ascendente;

import java_cup.runtime.*;
import asint.ClaseSemanticaTiny;
import asint.SintaxisAbstractaTiny.*;
import c_ast_ascendente.UnidadLexica.StringLocalizado;
import c_ast_ascendente.AnalizadorLexicoTiny;
import c_ast_ascendente.UnidadLexica;
import c_ast_ascendente.GestionErroresTiny;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sun Mar 23 23:27:32 CET 2025
  */
public class ConstructorASTTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConstructorASTTiny() {super();}

  /** Constructor which sets the default scanner. */
  public ConstructorASTTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConstructorASTTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\152\000\002\002\004\000\002\002\003\000\002\003" +
    "\006\000\002\004\004\000\002\004\002\000\002\005\005" +
    "\000\002\005\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\007\004\000\002\010\005\000\002" +
    "\011\010\000\002\012\003\000\002\012\002\000\002\013" +
    "\005\000\002\013\003\000\002\014\005\000\002\015\003" +
    "\000\002\015\002\000\002\016\003\000\002\016\003\000" +
    "\002\017\003\000\002\017\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\022\006" +
    "\000\002\024\006\000\002\025\005\000\002\025\003\000" +
    "\002\026\004\000\002\023\004\000\002\027\003\000\002" +
    "\027\002\000\002\030\005\000\002\030\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\032\004\000\002\033\006\000\002\044\004\000\002\044" +
    "\002\000\002\034\005\000\002\035\004\000\002\036\004" +
    "\000\002\037\003\000\002\040\004\000\002\041\004\000" +
    "\002\042\007\000\002\045\003\000\002\045\002\000\002" +
    "\046\005\000\002\046\003\000\002\043\003\000\002\047" +
    "\003\000\002\050\005\000\002\050\003\000\002\051\005" +
    "\000\002\051\003\000\002\061\003\000\002\061\003\000" +
    "\002\061\003\000\002\061\003\000\002\061\003\000\002" +
    "\061\003\000\002\052\005\000\002\052\005\000\002\052" +
    "\003\000\002\053\005\000\002\053\005\000\002\053\003" +
    "\000\002\054\005\000\002\054\003\000\002\062\003\000" +
    "\002\062\003\000\002\062\003\000\002\055\004\000\002" +
    "\055\003\000\002\063\003\000\002\063\003\000\002\056" +
    "\006\000\002\056\005\000\002\056\004\000\002\056\003" +
    "\000\002\057\003\000\002\057\003\000\002\057\003\000" +
    "\002\057\003\000\002\057\003\000\002\057\003\000\002" +
    "\057\003\000\002\057\003\000\002\060\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\234\000\004\006\004\001\002\000\052\006\ufffd\007" +
    "\ufffd\024\ufffd\026\030\027\013\030\011\036\016\040\010" +
    "\041\ufffd\043\ufffd\044\035\045\ufffd\046\ufffd\047\ufffd\050" +
    "\ufffd\051\ufffd\052\032\053\ufffd\062\031\063\015\001\002" +
    "\000\004\002\007\001\002\000\004\002\000\001\002\000" +
    "\004\002\001\001\002\000\004\063\222\001\002\000\010" +
    "\055\uffe4\057\uffe4\063\uffe4\001\002\000\006\017\ufff9\025" +
    "\ufff9\001\002\000\010\055\uffe5\057\uffe5\063\uffe5\001\002" +
    "\000\010\055\uffe8\057\uffe8\063\uffe8\001\002\000\010\055" +
    "\uffe9\057\uffe9\063\uffe9\001\002\000\010\055\uffe3\057\uffe3" +
    "\063\uffe3\001\002\000\010\055\uffed\057\uffed\063\uffed\001" +
    "\002\000\006\017\ufff8\025\ufff8\001\002\000\010\055\uffea" +
    "\057\uffea\063\uffea\001\002\000\010\055\uffec\057\uffec\063" +
    "\uffec\001\002\000\006\057\045\063\221\001\002\000\006" +
    "\017\ufffb\025\ufffb\001\002\000\010\055\uffeb\057\uffeb\063" +
    "\uffeb\001\002\000\006\017\ufffa\025\ufffa\001\002\000\010" +
    "\055\uffe7\057\uffe7\063\uffe7\001\002\000\010\055\uffe6\057" +
    "\uffe6\063\uffe6\001\002\000\020\026\030\027\013\030\011" +
    "\036\016\044\035\062\031\063\015\001\002\000\020\026" +
    "\030\027\013\030\011\036\016\044\035\062\031\063\015" +
    "\001\002\000\030\006\004\007\uffdb\024\056\041\101\043" +
    "\057\045\065\046\063\047\072\050\070\051\073\053\077" +
    "\001\002\000\006\017\052\025\051\001\002\000\004\006" +
    "\036\001\002\000\020\026\030\027\013\030\011\036\016" +
    "\044\035\062\031\063\015\001\002\000\006\057\045\063" +
    "\046\001\002\000\006\007\043\056\042\001\002\000\006" +
    "\007\uffdf\056\uffdf\001\002\000\020\026\030\027\013\030" +
    "\011\036\016\044\035\062\031\063\015\001\002\000\010" +
    "\055\uffe1\057\uffe1\063\uffe1\001\002\000\006\007\uffe0\056" +
    "\uffe0\001\002\000\004\064\047\001\002\000\006\007\uffde" +
    "\056\uffde\001\002\000\004\060\050\001\002\000\010\055" +
    "\uffe2\057\uffe2\063\uffe2\001\002\000\030\006\ufffe\007\ufffe" +
    "\024\ufffe\041\ufffe\043\ufffe\045\ufffe\046\ufffe\047\ufffe\050" +
    "\ufffe\051\ufffe\053\ufffe\001\002\000\024\026\030\027\013" +
    "\030\011\036\016\040\010\044\035\052\032\062\031\063" +
    "\015\001\002\000\006\017\ufffc\025\ufffc\001\002\000\006" +
    "\007\uffcf\017\uffcf\001\002\000\006\007\uffd3\017\uffd3\001" +
    "\002\000\026\004\123\021\103\033\124\034\121\035\122" +
    "\037\104\063\110\064\127\065\126\066\120\001\002\000" +
    "\026\004\123\021\103\033\124\034\121\035\122\037\104" +
    "\063\110\064\127\065\126\066\120\001\002\000\006\007" +
    "\uffd0\017\uffd0\001\002\000\004\007\212\001\002\000\006" +
    "\007\uffdc\017\210\001\002\000\026\004\123\021\103\033" +
    "\124\034\121\035\122\037\104\063\110\064\127\065\126" +
    "\066\120\001\002\000\006\007\uffd6\017\uffd6\001\002\000" +
    "\026\004\123\021\103\033\124\034\121\035\122\037\104" +
    "\063\110\064\127\065\126\066\120\001\002\000\006\007" +
    "\uffd9\017\uffd9\001\002\000\006\007\uffd8\017\uffd8\001\002" +
    "\000\026\004\123\021\103\033\124\034\121\035\122\037" +
    "\104\063\110\064\127\065\126\066\120\001\002\000\006" +
    "\007\uffbf\017\uffbf\001\002\000\026\004\123\021\103\033" +
    "\124\034\121\035\122\037\104\063\110\064\127\065\126" +
    "\066\120\001\002\000\006\007\uffc7\017\uffc7\001\002\000" +
    "\006\007\uffd4\017\uffd4\001\002\000\006\007\uffd2\017\uffd2" +
    "\001\002\000\006\007\uffd7\017\uffd7\001\002\000\004\063" +
    "\174\001\002\000\006\007\uffd1\017\uffd1\001\002\000\026" +
    "\004\123\021\103\033\124\034\121\035\122\037\104\063" +
    "\110\064\127\065\126\066\120\001\002\000\006\007\uffd5" +
    "\017\uffd5\001\002\000\026\004\uffa6\021\uffa6\033\uffa6\034" +
    "\uffa6\035\uffa6\037\uffa6\063\uffa6\064\uffa6\065\uffa6\066\uffa6" +
    "\001\002\000\060\005\uff9a\006\uff9a\007\uff9a\010\uff9a\011" +
    "\uff9a\012\uff9a\013\uff9a\014\uff9a\015\uff9a\016\uff9a\017\uff9a" +
    "\020\uff9a\021\uff9a\022\uff9a\023\uff9a\031\uff9a\032\uff9a\054" +
    "\uff9a\056\uff9a\057\uff9a\060\uff9a\061\uff9a\062\uff9a\001\002" +
    "\000\004\006\004\001\002\000\060\005\uff99\006\uff99\007" +
    "\uff99\010\uff99\011\uff99\012\uff99\013\uff99\014\uff99\015\uff99" +
    "\016\uff99\017\uff99\020\uff99\021\uff99\022\uff99\023\uff99\031" +
    "\uff99\032\uff99\054\uff99\056\uff99\057\uff99\060\uff99\061\uff99" +
    "\062\uff99\001\002\000\060\005\uffa1\006\uffa1\007\uffa1\010" +
    "\uffa1\011\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1" +
    "\017\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1\031\uffa1\032" +
    "\uffa1\054\uffa1\056\uffa1\057\uffa1\060\uffa1\061\uffa1\062\uffa1" +
    "\001\002\000\060\005\uff9b\006\uff9b\007\uff9b\010\uff9b\011" +
    "\uff9b\012\uff9b\013\uff9b\014\uff9b\015\uff9b\016\uff9b\017\uff9b" +
    "\020\uff9b\021\uff9b\022\uff9b\023\uff9b\031\uff9b\032\uff9b\054" +
    "\uff9b\056\uff9b\057\uff9b\060\uff9b\061\uff9b\062\uff9b\001\002" +
    "\000\060\005\uffa7\006\uffa7\007\uffa7\010\uffa7\011\uffa7\012" +
    "\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7" +
    "\021\uffa7\022\uffa7\023\uffa7\031\uffa7\032\uffa7\054\uffa7\056" +
    "\uffa7\057\163\060\uffa7\061\162\062\164\001\002\000\052" +
    "\005\uffac\006\uffac\007\uffac\010\uffac\011\uffac\012\uffac\013" +
    "\uffac\014\uffac\015\uffac\016\uffac\017\uffac\020\uffac\021\uffac" +
    "\022\uffac\023\uffac\031\uffac\032\uffac\054\uffac\056\uffac\060" +
    "\uffac\001\002\000\052\005\uffae\006\uffae\007\uffae\010\uffae" +
    "\011\uffae\012\uffae\013\uffae\014\uffae\015\uffae\016\uffae\017" +
    "\uffae\020\uffae\021\uffae\022\154\023\156\031\151\032\155" +
    "\054\153\056\uffae\060\uffae\001\002\000\040\005\uffb1\006" +
    "\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1" +
    "\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\147\056\uffb1\060" +
    "\uffb1\001\002\000\036\005\uffba\006\uffba\007\uffba\010\uffba" +
    "\011\uffba\012\uffba\013\uffba\014\uffba\015\uffba\016\uffba\017" +
    "\uffba\020\145\056\uffba\060\uffba\001\002\000\034\005\uffbc" +
    "\006\uffbc\007\uffbc\010\133\011\141\012\134\013\135\014" +
    "\142\015\137\016\140\017\uffbc\056\uffbc\060\uffbc\001\002" +
    "\000\016\005\uffbe\006\uffbe\007\uffbe\017\uffbe\056\uffbe\060" +
    "\uffbe\001\002\000\060\005\uff9c\006\uff9c\007\uff9c\010\uff9c" +
    "\011\uff9c\012\uff9c\013\uff9c\014\uff9c\015\uff9c\016\uff9c\017" +
    "\uff9c\020\uff9c\021\uff9c\022\uff9c\023\uff9c\031\uff9c\032\uff9c" +
    "\054\uff9c\056\uff9c\057\uff9c\060\uff9c\061\uff9c\062\uff9c\001" +
    "\002\000\060\005\uff9e\006\uff9e\007\uff9e\010\uff9e\011\uff9e" +
    "\012\uff9e\013\uff9e\014\uff9e\015\uff9e\016\uff9e\017\uff9e\020" +
    "\uff9e\021\uff9e\022\uff9e\023\uff9e\031\uff9e\032\uff9e\054\uff9e" +
    "\056\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e\001\002\000" +
    "\060\005\uff9d\006\uff9d\007\uff9d\010\uff9d\011\uff9d\012\uff9d" +
    "\013\uff9d\014\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d\021" +
    "\uff9d\022\uff9d\023\uff9d\031\uff9d\032\uff9d\054\uff9d\056\uff9d" +
    "\057\uff9d\060\uff9d\061\uff9d\062\uff9d\001\002\000\026\004" +
    "\123\021\103\033\124\034\121\035\122\037\104\063\110" +
    "\064\127\065\126\066\120\001\002\000\026\004\uffa5\021" +
    "\uffa5\033\uffa5\034\uffa5\035\uffa5\037\uffa5\063\uffa5\064\uffa5" +
    "\065\uffa5\066\uffa5\001\002\000\026\004\123\021\103\033" +
    "\124\034\121\035\122\037\104\063\110\064\127\065\126" +
    "\066\120\001\002\000\060\005\uff9f\006\uff9f\007\uff9f\010" +
    "\uff9f\011\uff9f\012\uff9f\013\uff9f\014\uff9f\015\uff9f\016\uff9f" +
    "\017\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f\031\uff9f\032" +
    "\uff9f\054\uff9f\056\uff9f\057\uff9f\060\uff9f\061\uff9f\062\uff9f" +
    "\001\002\000\060\005\uffa0\006\uffa0\007\uffa0\010\uffa0\011" +
    "\uffa0\012\uffa0\013\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0" +
    "\020\uffa0\021\uffa0\022\uffa0\023\uffa0\031\uffa0\032\uffa0\054" +
    "\uffa0\056\uffa0\057\uffa0\060\uffa0\061\uffa0\062\uffa0\001\002" +
    "\000\052\005\uffa8\006\uffa8\007\uffa8\010\uffa8\011\uffa8\012" +
    "\uffa8\013\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8" +
    "\021\uffa8\022\uffa8\023\uffa8\031\uffa8\032\uffa8\054\uffa8\056" +
    "\uffa8\060\uffa8\001\002\000\004\005\132\001\002\000\060" +
    "\005\uff98\006\uff98\007\uff98\010\uff98\011\uff98\012\uff98\013" +
    "\uff98\014\uff98\015\uff98\016\uff98\017\uff98\020\uff98\021\uff98" +
    "\022\uff98\023\uff98\031\uff98\032\uff98\054\uff98\056\uff98\057" +
    "\uff98\060\uff98\061\uff98\062\uff98\001\002\000\026\004\uffb9" +
    "\021\uffb9\033\uffb9\034\uffb9\035\uffb9\037\uffb9\063\uffb9\064" +
    "\uffb9\065\uffb9\066\uffb9\001\002\000\026\004\uffb7\021\uffb7" +
    "\033\uffb7\034\uffb7\035\uffb7\037\uffb7\063\uffb7\064\uffb7\065" +
    "\uffb7\066\uffb7\001\002\000\026\004\uffb6\021\uffb6\033\uffb6" +
    "\034\uffb6\035\uffb6\037\uffb6\063\uffb6\064\uffb6\065\uffb6\066" +
    "\uffb6\001\002\000\026\004\123\021\103\033\124\034\121" +
    "\035\122\037\104\063\110\064\127\065\126\066\120\001" +
    "\002\000\026\004\uffb4\021\uffb4\033\uffb4\034\uffb4\035\uffb4" +
    "\037\uffb4\063\uffb4\064\uffb4\065\uffb4\066\uffb4\001\002\000" +
    "\026\004\123\021\103\033\124\034\121\035\122\037\104" +
    "\063\110\064\127\065\126\066\120\001\002\000\026\004" +
    "\uffb8\021\uffb8\033\uffb8\034\uffb8\035\uffb8\037\uffb8\063\uffb8" +
    "\064\uffb8\065\uffb8\066\uffb8\001\002\000\026\004\uffb5\021" +
    "\uffb5\033\uffb5\034\uffb5\035\uffb5\037\uffb5\063\uffb5\064\uffb5" +
    "\065\uffb5\066\uffb5\001\002\000\016\005\uffbd\006\uffbd\007" +
    "\uffbd\017\uffbd\056\uffbd\060\uffbd\001\002\000\036\005\uffbb" +
    "\006\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb\014" +
    "\uffbb\015\uffbb\016\uffbb\017\uffbb\020\145\056\uffbb\060\uffbb" +
    "\001\002\000\026\004\123\021\103\033\124\034\121\035" +
    "\122\037\104\063\110\064\127\065\126\066\120\001\002" +
    "\000\036\005\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012" +
    "\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3" +
    "\056\uffb3\060\uffb3\001\002\000\026\004\123\021\103\033" +
    "\124\034\121\035\122\037\104\063\110\064\127\065\126" +
    "\066\120\001\002\000\036\005\uffb2\006\uffb2\007\uffb2\010" +
    "\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2" +
    "\017\uffb2\020\uffb2\056\uffb2\060\uffb2\001\002\000\026\004" +
    "\123\021\103\033\124\034\121\035\122\037\104\063\110" +
    "\064\127\065\126\066\120\001\002\000\026\004\123\021" +
    "\103\033\124\034\121\035\122\037\104\063\110\064\127" +
    "\065\126\066\120\001\002\000\026\004\uffa9\021\uffa9\033" +
    "\uffa9\034\uffa9\035\uffa9\037\uffa9\063\uffa9\064\uffa9\065\uffa9" +
    "\066\uffa9\001\002\000\026\004\uffab\021\uffab\033\uffab\034" +
    "\uffab\035\uffab\037\uffab\063\uffab\064\uffab\065\uffab\066\uffab" +
    "\001\002\000\026\004\123\021\103\033\124\034\121\035" +
    "\122\037\104\063\110\064\127\065\126\066\120\001\002" +
    "\000\026\004\uffaa\021\uffaa\033\uffaa\034\uffaa\035\uffaa\037" +
    "\uffaa\063\uffaa\064\uffaa\065\uffaa\066\uffaa\001\002\000\046" +
    "\005\uffaf\006\uffaf\007\uffaf\010\uffaf\011\uffaf\012\uffaf\013" +
    "\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf" +
    "\022\154\023\156\054\153\056\uffaf\060\uffaf\001\002\000" +
    "\052\005\uffad\006\uffad\007\uffad\010\uffad\011\uffad\012\uffad" +
    "\013\uffad\014\uffad\015\uffad\016\uffad\017\uffad\020\uffad\021" +
    "\uffad\022\uffad\023\uffad\031\uffad\032\uffad\054\uffad\056\uffad" +
    "\060\uffad\001\002\000\040\005\uffb0\006\uffb0\007\uffb0\010" +
    "\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0" +
    "\017\uffb0\020\uffb0\021\uffb0\056\uffb0\060\uffb0\001\002\000" +
    "\004\063\167\001\002\000\026\004\123\021\103\033\124" +
    "\034\121\035\122\037\104\063\110\064\127\065\126\066" +
    "\120\001\002\000\060\005\uffa2\006\uffa2\007\uffa2\010\uffa2" +
    "\011\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2\016\uffa2\017" +
    "\uffa2\020\uffa2\021\uffa2\022\uffa2\023\uffa2\031\uffa2\032\uffa2" +
    "\054\uffa2\056\uffa2\057\uffa2\060\uffa2\061\uffa2\062\uffa2\001" +
    "\002\000\004\060\166\001\002\000\060\005\uffa4\006\uffa4" +
    "\007\uffa4\010\uffa4\011\uffa4\012\uffa4\013\uffa4\014\uffa4\015" +
    "\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4" +
    "\031\uffa4\032\uffa4\054\uffa4\056\uffa4\057\uffa4\060\uffa4\061" +
    "\uffa4\062\uffa4\001\002\000\060\005\uffa3\006\uffa3\007\uffa3" +
    "\010\uffa3\011\uffa3\012\uffa3\013\uffa3\014\uffa3\015\uffa3\016" +
    "\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3\031\uffa3" +
    "\032\uffa3\054\uffa3\056\uffa3\057\uffa3\060\uffa3\061\uffa3\062" +
    "\uffa3\001\002\000\010\007\uffcb\017\uffcb\042\171\001\002" +
    "\000\004\006\004\001\002\000\006\007\uffcd\017\uffcd\001" +
    "\002\000\006\007\uffcc\017\uffcc\001\002\000\004\004\175" +
    "\001\002\000\030\004\123\005\uffc2\021\103\033\124\034" +
    "\121\035\122\037\104\063\110\064\127\065\126\066\120" +
    "\001\002\000\004\005\203\001\002\000\006\005\uffc0\056" +
    "\uffc0\001\002\000\006\005\uffc3\056\201\001\002\000\026" +
    "\004\123\021\103\033\124\034\121\035\122\037\104\063" +
    "\110\064\127\065\126\066\120\001\002\000\006\005\uffc1" +
    "\056\uffc1\001\002\000\006\007\uffc4\017\uffc4\001\002\000" +
    "\006\007\uffc9\017\uffc9\001\002\000\006\007\uffc8\017\uffc8" +
    "\001\002\000\006\007\uffc6\017\uffc6\001\002\000\006\007" +
    "\uffc5\017\uffc5\001\002\000\026\006\004\024\056\041\101" +
    "\043\057\045\065\046\063\047\072\050\070\051\073\053" +
    "\077\001\002\000\006\007\uffda\017\uffda\001\002\000\014" +
    "\002\uffff\007\uffff\017\uffff\025\uffff\042\uffff\001\002\000" +
    "\004\006\004\001\002\000\006\007\uffca\017\uffca\001\002" +
    "\000\006\007\uffce\017\uffce\001\002\000\006\057\045\063" +
    "\217\001\002\000\006\017\ufff6\025\ufff6\001\002\000\010" +
    "\055\uffdd\057\uffdd\063\uffdd\001\002\000\006\017\ufff7\025" +
    "\ufff7\001\002\000\004\004\223\001\002\000\022\005\ufff3" +
    "\026\030\027\013\030\011\036\016\044\035\062\031\063" +
    "\015\001\002\000\004\005\235\001\002\000\010\055\232" +
    "\057\045\063\uffee\001\002\000\006\005\ufff4\056\230\001" +
    "\002\000\006\005\ufff1\056\ufff1\001\002\000\020\026\030" +
    "\027\013\030\011\036\016\044\035\062\031\063\015\001" +
    "\002\000\006\005\ufff2\056\ufff2\001\002\000\004\063\uffef" +
    "\001\002\000\004\063\234\001\002\000\006\005\ufff0\056" +
    "\ufff0\001\002\000\004\006\004\001\002\000\006\017\ufff5" +
    "\025\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\234\000\006\002\004\003\005\001\001\000\034\004" +
    "\032\005\033\006\023\007\025\010\011\011\017\016\022" +
    "\017\021\020\020\021\013\022\016\023\024\024\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\017\217\020\020\021\013\023\024" +
    "\024\026\001\001\000\020\016\215\017\021\020\020\021" +
    "\013\022\016\023\024\024\026\001\001\000\036\003\070" +
    "\027\060\030\061\031\065\032\066\033\075\034\063\035" +
    "\101\036\073\037\054\040\074\041\077\042\057\043\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\016" +
    "\036\017\021\020\020\021\013\022\016\023\024\024\026" +
    "\025\037\026\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\016\036\017\021\020\020" +
    "\021\013\022\016\023\024\024\026\026\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\006\052\007\025\010\011\011\017\016\022" +
    "\017\021\020\020\021\013\022\016\023\024\024\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\047\214\050\116\051\115\052\114\053\113\054" +
    "\112\055\111\056\110\057\106\060\105\063\124\001\001" +
    "\000\030\047\212\050\116\051\115\052\114\053\113\054" +
    "\112\055\111\056\110\057\106\060\105\063\124\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\047\206\050\116\051\115\052\114\053\113\054\112" +
    "\055\111\056\110\057\106\060\105\063\124\001\001\000" +
    "\002\001\001\000\030\047\205\050\116\051\115\052\114" +
    "\053\113\054\112\055\111\056\110\057\106\060\105\063" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\047\204\050\116\051\115\052\114\053\113\054\112\055" +
    "\111\056\110\057\106\060\105\063\124\001\001\000\002" +
    "\001\001\000\030\047\203\050\116\051\115\052\114\053" +
    "\113\054\112\055\111\056\110\057\106\060\105\063\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\047\104\050\116\051\115\052\114\053\113\054" +
    "\112\055\111\056\110\057\106\060\105\063\124\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\167\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\062\151\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\061\135\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\050\130" +
    "\051\115\052\114\053\113\054\112\055\111\056\110\057" +
    "\106\060\105\063\124\001\001\000\002\001\001\000\014" +
    "\055\127\056\110\057\106\060\105\063\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\052\143\053\113\054\112" +
    "\055\111\056\110\057\106\060\105\063\124\001\001\000" +
    "\002\001\001\000\026\050\142\051\115\052\114\053\113" +
    "\054\112\055\111\056\110\057\106\060\105\063\124\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\053\145\054\112\055\111\056" +
    "\110\057\106\060\105\063\124\001\001\000\002\001\001" +
    "\000\020\053\147\054\112\055\111\056\110\057\106\060" +
    "\105\063\124\001\001\000\002\001\001\000\020\053\160" +
    "\054\112\055\111\056\110\057\106\060\105\063\124\001" +
    "\001\000\014\055\157\056\110\057\106\060\105\063\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\054" +
    "\156\055\111\056\110\057\106\060\105\063\124\001\001" +
    "\000\002\001\001\000\004\062\151\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\047\164" +
    "\050\116\051\115\052\114\053\113\054\112\055\111\056" +
    "\110\057\106\060\105\063\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\044\171\001\001\000\004\003\172\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\045" +
    "\175\046\177\047\176\050\116\051\115\052\114\053\113" +
    "\054\112\055\111\056\110\057\106\060\105\063\124\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\047\201\050\116\051\115\052\114\053\113\054" +
    "\112\055\111\056\110\057\106\060\105\063\124\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\003\070\031\210\032\066\033\075\034\063\035\101\036" +
    "\073\037\054\040\074\041\077\042\057\043\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\213\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\012\223\013\225\014\226\016\224" +
    "\017\021\020\020\021\013\022\016\023\024\024\026\001" +
    "\001\000\002\001\001\000\004\015\232\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\014\230\016\224\017" +
    "\021\020\020\021\013\022\016\023\024\024\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\235\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstructorASTTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstructorASTTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstructorASTTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 
  return getScanner().next_token(); 

    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConstructorASTTiny$actions {


  ClaseSemanticaTiny sem = new ClaseSemanticaTiny();

  private final ConstructorASTTiny parser;

  /** Constructor */
  CUP$ConstructorASTTiny$actions(ConstructorASTTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTTiny$do_action_part00000000(
    int                        CUP$ConstructorASTTiny$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTTiny$parser,
    java.util.Stack            CUP$ConstructorASTTiny$stack,
    int                        CUP$ConstructorASTTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstructorASTTiny$result;

      /* select the action based on the action number */
      switch (CUP$ConstructorASTTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		Prog start_val = (Prog)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		RESULT = start_val;
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$ConstructorASTTiny$parser.done_parsing();
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= bloque 
            {
              Prog RESULT =null;
		Prog bloq = (Prog)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = bloq; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("programa",0, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bloque ::= LLAVEAP declar_opt intr_opt LLAVECIERRE 
            {
              Prog RESULT =null;
		DecsOpt decs = (DecsOpt)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		IntrsOpt intrs = (IntrsOpt)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = sem.prog(decs, intrs); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("bloque",1, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declar_opt ::= declaraciones FINDECLAR 
            {
              DecsOpt RESULT =null;
		LDecs decs = (LDecs)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = sem.si_decs(decs); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("declar_opt",2, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declar_opt ::= 
            {
              DecsOpt RESULT =null;
		 RESULT = sem.no_decs(); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("declar_opt",2, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaraciones ::= declaraciones PCOMA declaracion 
            {
              LDecs RESULT =null;
		LDecs decs = (LDecs)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.mas_decs(decs, dec); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("declaraciones",3, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaraciones ::= declaracion 
            {
              LDecs RESULT =null;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.una_dec(dec); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("declaraciones",3, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracion ::= declar_var 
            {
              Dec RESULT =null;
		Dec d_var = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = d_var; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("declaracion",4, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion ::= declar_tipo 
            {
              Dec RESULT =null;
		Dec d_tipo = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = d_tipo; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("declaracion",4, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion ::= declar_proc 
            {
              Dec RESULT =null;
		Dec d_proc = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = d_proc; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("declaracion",4, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declar_var ::= tipo_0 IDEN 
            {
              Dec RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Dec)sem.dec_var(tipo, id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("declar_var",5, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declar_tipo ::= P_TYPE tipo_0 IDEN 
            {
              Dec RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Dec)sem.dec_tipo(tipo, id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("declar_tipo",6, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declar_proc ::= P_PROC IDEN PAP lista_param_form_opt PCIERRE bloque 
            {
              Dec RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-4)).value;
		PForms pforms = (PForms)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		Prog prog = (Prog)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Dec)sem.dec_proc(id.str(), pforms, prog).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("declar_proc",7, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lista_param_form_opt ::= lista_param_form 
            {
              PForms RESULT =null;
		LPForms pforms = (LPForms)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.si_pforms(pforms); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("lista_param_form_opt",8, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lista_param_form_opt ::= 
            {
              PForms RESULT =null;
		 RESULT = sem.no_pforms(); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("lista_param_form_opt",8, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lista_param_form ::= lista_param_form COMA param_formal 
            {
              LPForms RESULT =null;
		LPForms pforms = (LPForms)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		PForm pform = (PForm)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.mas_pforms(pforms, pform); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("lista_param_form",9, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lista_param_form ::= param_formal 
            {
              LPForms RESULT =null;
		PForm pform = (PForm)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.una_pform(pform); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("lista_param_form",9, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // param_formal ::= tipo_0 ref_opt IDEN 
            {
              PForm RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		Ref ref = (Ref)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (PForm)sem.pform(tipo, ref, id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("param_formal",10, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ref_opt ::= AND 
            {
              Ref RESULT =null;
		 RESULT = sem.si_ref(); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("ref_opt",11, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ref_opt ::= 
            {
              Ref RESULT =null;
		 RESULT = sem.no_ref(); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("ref_opt",11, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo_0 ::= array 
            {
              Tipo RESULT =null;
		Tipo arr = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = arr; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo_0",12, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipo_0 ::= tipo_1 
            {
              Tipo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = tipo; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo_0",12, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipo_1 ::= puntero 
            {
              Tipo RESULT =null;
		Tipo punt = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = punt; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo_1",13, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipo_1 ::= tipo_2 
            {
              Tipo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = tipo; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo_1",13, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipo_2 ::= IDEN 
            {
              Tipo RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Tipo)sem.t_iden(id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo_2",14, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipo_2 ::= tipo_basico 
            {
              Tipo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = tipo; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo_2",14, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tipo_2 ::= struct 
            {
              Tipo RESULT =null;
		Tipo strct = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = strct; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo_2",14, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tipo_basico ::= P_INT 
            {
              Tipo RESULT =null;
		 RESULT = sem.t_int(); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo_basico",15, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipo_basico ::= P_REAL 
            {
              Tipo RESULT =null;
		 RESULT = sem.t_real(); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo_basico",15, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipo_basico ::= P_BOOL 
            {
              Tipo RESULT =null;
		 RESULT = sem.t_bool(); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo_basico",15, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipo_basico ::= P_STRING 
            {
              Tipo RESULT =null;
		 RESULT = sem.t_string(); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo_basico",15, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // array ::= tipo_0 CORCHETEAP ENT CORCHETECIERRE 
            {
              Tipo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-3)).value;
		StringLocalizado ent = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = (Tipo)sem.t_array(tipo, ent.str()).ponFila(ent.fila()).ponCol(ent.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("array",16, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // struct ::= P_STRUCT LLAVEAP campos_struct LLAVECIERRE 
            {
              Tipo RESULT =null;
		CamposS camposs = (CamposS)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = sem.t_struct(camposs); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("struct",18, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // campos_struct ::= campos_struct COMA campo_struct 
            {
              CamposS RESULT =null;
		CamposS camposs = (CamposS)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		CampoS campos = (CampoS)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.mas_cmp_s(camposs, campos); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("campos_struct",19, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // campos_struct ::= campo_struct 
            {
              CamposS RESULT =null;
		CampoS campos = (CampoS)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.un_cmp_s(campos); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("campos_struct",19, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // campo_struct ::= tipo_0 IDEN 
            {
              CampoS RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (CampoS)sem.cmp_s(tipo, id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("campo_struct",20, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // puntero ::= EXPONENTE tipo_1 
            {
              Tipo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.t_punter(tipo); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("puntero",17, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // intr_opt ::= lista_intr 
            {
              IntrsOpt RESULT =null;
		LIntrs intrs = (LIntrs)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.si_intrs(intrs); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("intr_opt",21, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // intr_opt ::= 
            {
              IntrsOpt RESULT =null;
		 RESULT = sem.no_intrs(); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("intr_opt",21, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // lista_intr ::= lista_intr PCOMA instruccion 
            {
              LIntrs RESULT =null;
		LIntrs intrs = (LIntrs)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		Intr intr = (Intr)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.mas_intrs(intrs, intr); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("lista_intr",22, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // lista_intr ::= instruccion 
            {
              LIntrs RESULT =null;
		Intr intr = (Intr)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.una_intr(intr); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("lista_intr",22, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instruccion ::= instruccion_eval 
            {
              Intr RESULT =null;
		Intr intr = (Intr)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = intr; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",23, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instruccion ::= instruccion_if 
            {
              Intr RESULT =null;
		Intr intr = (Intr)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = intr; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",23, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instruccion ::= instruccion_while 
            {
              Intr RESULT =null;
		Intr intr = (Intr)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = intr; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",23, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instruccion ::= instruccion_read 
            {
              Intr RESULT =null;
		Intr intr = (Intr)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = intr; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",23, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instruccion ::= instruccion_write 
            {
              Intr RESULT =null;
		Intr intr = (Intr)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = intr; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",23, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // instruccion ::= instruccion_nl 
            {
              Intr RESULT =null;
		Intr intr = (Intr)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = intr; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",23, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // instruccion ::= instruccion_new 
            {
              Intr RESULT =null;
		Intr intr = (Intr)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = intr; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",23, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // instruccion ::= instruccion_delete 
            {
              Intr RESULT =null;
		Intr intr = (Intr)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = intr; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",23, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // instruccion ::= instruccion_call 
            {
              Intr RESULT =null;
		Intr intr = (Intr)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = intr; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",23, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // instruccion ::= instruccion_compuesta 
            {
              Intr RESULT =null;
		Intr intr = (Intr)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = intr; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",23, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // instruccion_eval ::= INIEVAL expresion 
            {
              Intr RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.i_eval(exp); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion_eval",24, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // instruccion_if ::= P_IF expresion bloque instruccion_else_opt 
            {
              Intr RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		Prog prog = (Prog)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		I_Else ielse = (I_Else)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.i_if(exp, prog, ielse); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion_if",25, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // instruccion_else_opt ::= P_ELSE bloque 
            {
              I_Else RESULT =null;
		Prog prog = (Prog)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.si_else(prog); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion_else_opt",34, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // instruccion_else_opt ::= 
            {
              I_Else RESULT =null;
		 RESULT = sem.no_else(); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion_else_opt",34, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // instruccion_while ::= P_WHILE expresion bloque 
            {
              Intr RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		Prog prog = (Prog)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.i_while(exp, prog); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion_while",26, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // instruccion_read ::= P_READ expresion 
            {
              Intr RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.i_read(exp); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion_read",27, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // instruccion_write ::= P_WRITE expresion 
            {
              Intr RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.i_write(exp); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion_write",28, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // instruccion_nl ::= P_NL 
            {
              Intr RESULT =null;
		 RESULT = sem.i_nl(); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion_nl",29, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // instruccion_new ::= P_NEW expresion 
            {
              Intr RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.i_new(exp); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion_new",30, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // instruccion_delete ::= P_DELETE expresion 
            {
              Intr RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.i_delete(exp); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion_delete",31, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // instruccion_call ::= P_CALL IDEN PAP lista_param_real_opt PCIERRE 
            {
              Intr RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-3)).value;
		PReals preals = (PReals)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = (Intr)sem.i_call(id.str(), preals).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion_call",32, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // lista_param_real_opt ::= lista_param_real 
            {
              PReals RESULT =null;
		LPReals preals = (LPReals)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.si_preals(preals); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("lista_param_real_opt",35, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // lista_param_real_opt ::= 
            {
              PReals RESULT =null;
		 RESULT = sem.no_preals(); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("lista_param_real_opt",35, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // lista_param_real ::= lista_param_real COMA expresion 
            {
              LPReals RESULT =null;
		LPReals preals = (LPReals)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.mas_preals(preals, exp); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("lista_param_real",36, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // lista_param_real ::= expresion 
            {
              LPReals RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.un_preals(exp); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("lista_param_real",36, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // instruccion_compuesta ::= bloque 
            {
              Intr RESULT =null;
		Prog prog = (Prog)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.i_prog(prog); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion_compuesta",33, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresion ::= E0 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("expresion",37, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E0 ::= E1 IGUAL E0 
            {
              Exp RESULT =null;
		Exp opnd0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp)sem.e_asig(opnd0, opnd1).ponFila(op.fila()).ponCol(op.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E0",38, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E0 ::= E1 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E0",38, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E1 ::= E1 OP1 E2 
            {
              Exp RESULT =null;
		Exp opnd0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp)sem.mkop(op.str(), opnd0, opnd1).ponFila(op.fila()).ponCol(op.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E1",39, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E1 ::= E2 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E1",39, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OP1 ::= LT 
            {
              StringLocalizado RESULT =null;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("OP1",47, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OP1 ::= LEQ 
            {
              StringLocalizado RESULT =null;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("OP1",47, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OP1 ::= GT 
            {
              StringLocalizado RESULT =null;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("OP1",47, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OP1 ::= GEQ 
            {
              StringLocalizado RESULT =null;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("OP1",47, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OP1 ::= COMP 
            {
              StringLocalizado RESULT =null;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("OP1",47, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OP1 ::= DIST 
            {
              StringLocalizado RESULT =null;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("OP1",47, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E2 ::= E2 MAS E3 
            {
              Exp RESULT =null;
		Exp opnd0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp)sem.e_suma(opnd0, opnd1).ponFila(op.fila()).ponCol(op.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E2",40, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E2 ::= E3 MENOS E3 
            {
              Exp RESULT =null;
		Exp opnd0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp)sem.e_resta(opnd0, opnd1).ponFila(op.fila()).ponCol(op.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E2",40, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E2 ::= E3 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E2",40, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E3 ::= E4 P_AND E3 
            {
              Exp RESULT =null;
		Exp opnd0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp)sem.e_and(opnd0, opnd1).ponFila(op.fila()).ponCol(op.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E3",41, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E3 ::= E4 P_OR E4 
            {
              Exp RESULT =null;
		Exp opnd0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp)sem.e_or(opnd0, opnd1).ponFila(op.fila()).ponCol(op.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E3",41, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E3 ::= E4 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E3",41, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E4 ::= E4 OP4 E5 
            {
              Exp RESULT =null;
		Exp opnd0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp)sem.mkop(op.str(), opnd0, opnd1).ponFila(op.fila()).ponCol(op.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E4",42, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // E4 ::= E5 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E4",42, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OP4 ::= MUL 
            {
              StringLocalizado RESULT =null;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("OP4",48, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OP4 ::= DIV 
            {
              StringLocalizado RESULT =null;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("OP4",48, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OP4 ::= PORCENTAJE 
            {
              StringLocalizado RESULT =null;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("OP4",48, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E5 ::= OP5 E5 
            {
              Exp RESULT =null;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp)sem.mkunary(op.str(), exp).ponFila(op.fila()).ponCol(op.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E5",43, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // E5 ::= E6 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E5",43, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OP5 ::= MENOS 
            {
              StringLocalizado RESULT =null;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("OP5",49, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OP5 ::= P_NOT 
            {
              StringLocalizado RESULT =null;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("OP5",49, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // E6 ::= E6 CORCHETEAP expresion CORCHETECIERRE 
            {
              Exp RESULT =null;
		Exp opnd0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-3)).value;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = (Exp)sem.e_indexado(opnd0, opnd1).ponFila(op.fila()).ponCol(op.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E6",44, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // E6 ::= E6 PUNTO IDEN 
            {
              Exp RESULT =null;
		Exp opnd = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp)sem.e_campo(opnd, id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E6",44, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // E6 ::= E6 EXPONENTE 
            {
              Exp RESULT =null;
		Exp opnd = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp)sem.e_puntero(opnd).ponFila(op.fila()).ponCol(op.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E6",44, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // E6 ::= E7 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E6",44, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // E7 ::= ENT 
            {
              Exp RESULT =null;
		StringLocalizado ent = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp)sem.e_lit_ent(ent.str()).ponFila(ent.fila()).ponCol(ent.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E7",45, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // E7 ::= REAL 
            {
              Exp RESULT =null;
		StringLocalizado real = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp)sem.e_lit_ent(real.str()).ponFila(real.fila()).ponCol(real.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E7",45, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // E7 ::= P_TRUE 
            {
              Exp RESULT =null;
		StringLocalizado exp = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp)sem.e_true().ponFila(exp.fila()).ponCol(exp.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E7",45, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // E7 ::= P_FALSE 
            {
              Exp RESULT =null;
		StringLocalizado exp = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp)sem.e_false().ponFila(exp.fila()).ponCol(exp.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E7",45, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // E7 ::= STRING 
            {
              Exp RESULT =null;
		StringLocalizado string = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp)sem.e_string(string.str()).ponFila(string.fila()).ponCol(string.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E7",45, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // E7 ::= IDEN 
            {
              Exp RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp)sem.e_iden(id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E7",45, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // E7 ::= P_NULL 
            {
              Exp RESULT =null;
		StringLocalizado exp = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp)sem.e_null().ponFila(exp.fila()).ponCol(exp.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E7",45, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // E7 ::= E8 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E7",45, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // E8 ::= PAP E0 PCIERRE 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = exp; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E8",46, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConstructorASTTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTTiny$do_action(
    int                        CUP$ConstructorASTTiny$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTTiny$parser,
    java.util.Stack            CUP$ConstructorASTTiny$stack,
    int                        CUP$ConstructorASTTiny$top)
    throws java.lang.Exception
    {
              return CUP$ConstructorASTTiny$do_action_part00000000(
                               CUP$ConstructorASTTiny$act_num,
                               CUP$ConstructorASTTiny$parser,
                               CUP$ConstructorASTTiny$stack,
                               CUP$ConstructorASTTiny$top);
    }
}

