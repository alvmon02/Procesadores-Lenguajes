/* ConstructorASTsTiny.java */
/* Generated By:JavaCC: Do not edit this line. ConstructorASTsTiny.java */
package c_ast_descendente;

import asint.SintaxisAbstractaTiny.*;
import asint.*;

public class ConstructorASTsTiny implements ConstructorASTsTinyConstants {
    protected ClaseSemanticaTiny sem = new ClaseSemanticaTiny();

  final public Prog analiza() throws ParseException {Prog prog;
    prog = programa();
    fin();
{if ("" != null) return prog;}
    throw new Error("Missing return statement in function");
}

  final public void fin() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 0:{
      jj_consume_token(0);
      break;
      }
    case 35:{
      jj_consume_token(35);
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public Prog programa() throws ParseException {Bloque bloq;
    bloq = bloque();
{if ("" != null) return sem.prog(bloq);}
    throw new Error("Missing return statement in function");
}

  final public Bloque bloque() throws ParseException {DecsOpt decs; IntrsOpt intrs;
    jj_consume_token(36);
    decs = declar_opt();
    intrs = instr_opt();
    jj_consume_token(37);
{if ("" != null) return sem.bloque(decs, intrs);}
    throw new Error("Missing return statement in function");
}

  final public DecsOpt declar_opt() throws ParseException {LDecs decs;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case t_int:
    case t_real:
    case t_bool:
    case t_string:
    case proc:
    case struct:
    case type:
    case iden:
    case 46:{
      decs = lista_declaraciones();
      jj_consume_token(38);
{if ("" != null) return sem.si_decs(decs);}
      break;
      }
    default:
      jj_la1[1] = jj_gen;
{if ("" != null) return sem.no_decs();}
    }
    throw new Error("Missing return statement in function");
}

  final public LDecs lista_declaraciones() throws ParseException {LDecs decs; Dec dec;
    dec = declaracion();
    decs = rlista_decs(sem.una_dec(dec));
{if ("" != null) return decs;}
    throw new Error("Missing return statement in function");
}

  final public LDecs rlista_decs(LDecs decsh) throws ParseException {LDecs decs; Dec dec;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 39:{
      jj_consume_token(39);
      dec = declaracion();
      decs = rlista_decs(sem.mas_decs(decsh, dec));
{if ("" != null) return decs;}
      break;
      }
    default:
      jj_la1[2] = jj_gen;
{if ("" != null) return decsh;}
    }
    throw new Error("Missing return statement in function");
}

  final public Dec declaracion() throws ParseException {Dec dec;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case t_int:
    case t_real:
    case t_bool:
    case t_string:
    case struct:
    case iden:
    case 46:{
      dec = declaracion_variable();
{if ("" != null) return dec;}
      break;
      }
    case type:{
      dec = declaracion_tipo();
{if ("" != null) return dec;}
      break;
      }
    case proc:{
      dec = declaracion_proc();
{if ("" != null) return dec;}
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public Dec declaracion_variable() throws ParseException {Tipo tipo; Token id;
    tipo = tipo_0();
    id = jj_consume_token(iden);
{if ("" != null) return (Dec)sem.dec_var(tipo, id.image).ponFila(id.beginLine).ponCol(id.beginColumn);}
    throw new Error("Missing return statement in function");
}

  final public Dec declaracion_tipo() throws ParseException {Tipo tipo; Token id;
    jj_consume_token(type);
    tipo = tipo_0();
    id = jj_consume_token(iden);
{if ("" != null) return (Dec)sem.dec_tipo(tipo, id.image).ponFila(id.beginLine).ponCol(id.beginColumn);}
    throw new Error("Missing return statement in function");
}

  final public Dec declaracion_proc() throws ParseException {Token id; PForms pforms; Bloque prog;
    jj_consume_token(proc);
    id = jj_consume_token(iden);
    jj_consume_token(40);
    pforms = param_formales();
    jj_consume_token(41);
    prog = bloque();
{if ("" != null) return (Dec)sem.dec_proc(id.image, pforms, prog).ponFila(id.beginLine).ponCol(id.beginColumn);}
    throw new Error("Missing return statement in function");
}

  final public PForms param_formales() throws ParseException {LPForms pforms;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case t_int:
    case t_real:
    case t_bool:
    case t_string:
    case struct:
    case iden:
    case 46:{
      pforms = lista_params();
{if ("" != null) return sem.si_pforms(pforms);}
      break;
      }
    default:
      jj_la1[4] = jj_gen;
{if ("" != null) return sem.no_pforms();}
    }
    throw new Error("Missing return statement in function");
}

  final public LPForms lista_params() throws ParseException {LPForms pforms; PForm pform;
    pform = parametro();
    pforms = rlista_param(sem.una_pform(pform));
{if ("" != null) return pforms;}
    throw new Error("Missing return statement in function");
}

  final public LPForms rlista_param(LPForms pformsh) throws ParseException {LPForms pforms; PForm pform;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 42:{
      jj_consume_token(42);
      pform = parametro();
      pforms = rlista_param(sem.mas_pforms(pformsh, pform));
{if ("" != null) return pforms;}
      break;
      }
    default:
      jj_la1[5] = jj_gen;
{if ("" != null) return pformsh;}
    }
    throw new Error("Missing return statement in function");
}

  final public PForm parametro() throws ParseException {Tipo tipo; Ref ref; Token id;
    tipo = tipo_0();
    ref = ref_op();
    id = jj_consume_token(iden);
{if ("" != null) return (PForm)sem.pform(tipo, ref, id.image).ponFila(id.beginLine).ponCol(id.beginColumn);}
    throw new Error("Missing return statement in function");
}

  final public Ref ref_op() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 43:{
      jj_consume_token(43);
{if ("" != null) return sem.si_ref();}
      break;
      }
    default:
      jj_la1[6] = jj_gen;
{if ("" != null) return sem.no_ref();}
    }
    throw new Error("Missing return statement in function");
}

  final public Tipo tipo_0() throws ParseException {Tipo tipo0; Tipo tipo1;
    tipo0 = tipo_1();
    tipo1 = tipo_0Prime(tipo0);
{if ("" != null) return tipo1;}
    throw new Error("Missing return statement in function");
}

  final public Tipo tipo_0Prime(Tipo tipoh) throws ParseException {Tipo tipo; Token ent;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 44:{
      jj_consume_token(44);
      ent = jj_consume_token(lit_ent);
      jj_consume_token(45);
      tipo = tipo_0Prime((Tipo)sem.t_array(tipoh, ent.image).ponFila(ent.beginLine).ponCol(ent.beginColumn));
{if ("" != null) return tipo;}
      break;
      }
    default:
      jj_la1[7] = jj_gen;
{if ("" != null) return tipoh;}
    }
    throw new Error("Missing return statement in function");
}

  final public Tipo tipo_1() throws ParseException {Tipo tipo;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 46:{
      tipo = puntero();
{if ("" != null) return tipo;}
      break;
      }
    case t_int:
    case t_real:
    case t_bool:
    case t_string:
    case struct:
    case iden:{
      tipo = tipo_2();
{if ("" != null) return tipo;}
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public Tipo tipo_2() throws ParseException {Tipo tipo; Token id;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case t_int:
    case t_real:
    case t_bool:
    case t_string:{
      tipo = tipo_basico();
{if ("" != null) return tipo;}
      break;
      }
    case iden:{
      id = jj_consume_token(iden);
{if ("" != null) return (Tipo)sem.t_iden(id.image).ponFila(id.beginLine).ponCol(id.beginColumn);}
      break;
      }
    case struct:{
      tipo = struct();
{if ("" != null) return tipo;}
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

// Se ajustó para que acepte tipos básicos
  final public 
  Tipo tipo_basico() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case t_int:{
      jj_consume_token(t_int);
{if ("" != null) return sem.t_int();}
      break;
      }
    case t_real:{
      jj_consume_token(t_real);
{if ("" != null) return sem.t_real();}
      break;
      }
    case t_bool:{
      jj_consume_token(t_bool);
{if ("" != null) return sem.t_bool();}
      break;
      }
    case t_string:{
      jj_consume_token(t_string);
{if ("" != null) return sem.t_string();}
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public Tipo struct() throws ParseException {CamposS camposs;
    jj_consume_token(struct);
    jj_consume_token(36);
    camposs = lista_campos_struct();
    jj_consume_token(37);
{if ("" != null) return sem.t_struct(camposs);}
    throw new Error("Missing return statement in function");
}

  final public CamposS lista_campos_struct() throws ParseException {CampoS campos; CamposS camposs;
    campos = campo_struct();
    camposs = rlista_campo_struct(sem.un_cmp_s(campos));
{if ("" != null) return camposs;}
    throw new Error("Missing return statement in function");
}

  final public CamposS rlista_campo_struct(CamposS campossh) throws ParseException {CampoS campos; CamposS camposs;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 42:{
      jj_consume_token(42);
      campos = campo_struct();
      camposs = rlista_campo_struct(sem.mas_cmp_s(campossh, campos));
{if ("" != null) return camposs;}
      break;
      }
    default:
      jj_la1[11] = jj_gen;
{if ("" != null) return campossh;}
    }
    throw new Error("Missing return statement in function");
}

  final public CampoS campo_struct() throws ParseException {Tipo tipo; Token id;
    tipo = tipo_0();
    id = jj_consume_token(iden);
{if ("" != null) return (CampoS)sem.cmp_s(tipo, id.image).ponFila(id.beginLine).ponCol(id.beginColumn);}
    throw new Error("Missing return statement in function");
}

  final public Tipo puntero() throws ParseException {Tipo tipo;
    jj_consume_token(46);
    tipo = tipo_1();
{if ("" != null) return sem.t_punter(tipo);}
    throw new Error("Missing return statement in function");
}

  final public IntrsOpt instr_opt() throws ParseException {LIntrs intrs;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case t_if:
    case t_while:
    case t_new:
    case delete:
    case read:
    case write:
    case nl:
    case call:
    case 36:
    case 47:{
      intrs = lista_instrucciones();
{if ("" != null) return sem.si_intrs(intrs);}
      break;
      }
    default:
      jj_la1[12] = jj_gen;
{if ("" != null) return sem.no_intrs();}
    }
    throw new Error("Missing return statement in function");
}

  final public LIntrs lista_instrucciones() throws ParseException {Intr intr; LIntrs intrs;
    intr = instruccion();
    intrs = rlista_instrs(sem.una_intr(intr));
{if ("" != null) return intrs;}
    throw new Error("Missing return statement in function");
}

  final public LIntrs rlista_instrs(LIntrs intrsh) throws ParseException {Intr intr; LIntrs intrs;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 39:{
      jj_consume_token(39);
      intr = instruccion();
      intrs = rlista_instrs(sem.mas_intrs(intrsh, intr));
{if ("" != null) return intrs;}
      break;
      }
    default:
      jj_la1[13] = jj_gen;
{if ("" != null) return intrsh;}
    }
    throw new Error("Missing return statement in function");
}

  final public Intr instruccion() throws ParseException {Intr intr;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 47:{
      intr = instruccion_eval();
{if ("" != null) return intr;}
      break;
      }
    case t_if:{
      intr = instruccion_if();
{if ("" != null) return intr;}
      break;
      }
    case t_while:{
      intr = instruccion_while();
{if ("" != null) return intr;}
      break;
      }
    case read:{
      intr = instruccion_read();
{if ("" != null) return intr;}
      break;
      }
    case write:{
      intr = instruccion_write();
{if ("" != null) return intr;}
      break;
      }
    case nl:{
      intr = instruccion_nl();
{if ("" != null) return intr;}
      break;
      }
    case t_new:{
      intr = instruccion_new();
{if ("" != null) return intr;}
      break;
      }
    case delete:{
      intr = instruccion_delete();
{if ("" != null) return intr;}
      break;
      }
    case call:{
      intr = instruccion_call();
{if ("" != null) return intr;}
      break;
      }
    case 36:{
      intr = instruccion_compuesta();
{if ("" != null) return intr;}
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public Intr instruccion_eval() throws ParseException {Exp exp;
    jj_consume_token(47);
    exp = expresion();
{if ("" != null) return sem.i_eval(exp);}
    throw new Error("Missing return statement in function");
}

  final public Intr instruccion_if() throws ParseException {Exp exp; Bloque prog; I_Else ielse;
    jj_consume_token(t_if);
    exp = expresion();
    prog = bloque();
    ielse = instruccion_else_opt();
{if ("" != null) return sem.i_if(exp, prog, ielse);}
    throw new Error("Missing return statement in function");
}

  final public I_Else instruccion_else_opt() throws ParseException {Bloque prog;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case t_else:{
      jj_consume_token(t_else);
      prog = bloque();
{if ("" != null) return sem.si_else(prog);}
      break;
      }
    default:
      jj_la1[15] = jj_gen;
{if ("" != null) return sem.no_else();}
    }
    throw new Error("Missing return statement in function");
}

  final public Intr instruccion_while() throws ParseException {Exp exp; Bloque prog;
    jj_consume_token(t_while);
    exp = expresion();
    prog = bloque();
{if ("" != null) return sem.i_while(exp, prog);}
    throw new Error("Missing return statement in function");
}

  final public Intr instruccion_read() throws ParseException {Exp exp;
    jj_consume_token(read);
    exp = expresion();
{if ("" != null) return sem.i_read(exp);}
    throw new Error("Missing return statement in function");
}

  final public Intr instruccion_write() throws ParseException {Exp exp;
    jj_consume_token(write);
    exp = expresion();
{if ("" != null) return sem.i_write(exp);}
    throw new Error("Missing return statement in function");
}

  final public Intr instruccion_nl() throws ParseException {
    jj_consume_token(nl);
{if ("" != null) return sem.i_nl();}
    throw new Error("Missing return statement in function");
}

  final public Intr instruccion_new() throws ParseException {Exp exp;
    jj_consume_token(t_new);
    exp = expresion();
{if ("" != null) return sem.i_new(exp);}
    throw new Error("Missing return statement in function");
}

  final public Intr instruccion_delete() throws ParseException {Exp exp;
    jj_consume_token(delete);
    exp = expresion();
{if ("" != null) return sem.i_delete(exp);}
    throw new Error("Missing return statement in function");
}

  final public Intr instruccion_call() throws ParseException {Token id; PReals preals;
    jj_consume_token(call);
    id = jj_consume_token(iden);
    jj_consume_token(40);
    preals = params_reales();
    jj_consume_token(41);
{if ("" != null) return (Intr)sem.i_call(id.image, preals).ponFila(id.beginLine).ponCol(id.beginColumn);}
    throw new Error("Missing return statement in function");
}

  final public PReals params_reales() throws ParseException {LPReals preals;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case not:
    case nulo:
    case t_true:
    case t_false:
    case iden:
    case lit_ent:
    case lit_real:
    case cadena:
    case 40:
    case 49:{
      preals = lista_params_reales();
{if ("" != null) return sem.si_preals(preals);}
      break;
      }
    default:
      jj_la1[16] = jj_gen;
{if ("" != null) return sem.no_preals();}
    }
    throw new Error("Missing return statement in function");
}

  final public LPReals lista_params_reales() throws ParseException {Exp exp; LPReals preals;
    exp = expresion();
    preals = rlista_params_reales(sem.un_preals(exp));
{if ("" != null) return preals;}
    throw new Error("Missing return statement in function");
}

  final public LPReals rlista_params_reales(LPReals prealsh) throws ParseException {Exp exp; LPReals preals;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 42:{
      jj_consume_token(42);
      exp = expresion();
      preals = rlista_params_reales(sem.mas_preals(prealsh, exp));
{if ("" != null) return preals;}
      break;
      }
    default:
      jj_la1[17] = jj_gen;
{if ("" != null) return prealsh;}
    }
    throw new Error("Missing return statement in function");
}

  final public Intr instruccion_compuesta() throws ParseException {Bloque prog;
    prog = bloque();
{if ("" != null) return sem.i_prog(prog);}
    throw new Error("Missing return statement in function");
}

  final public Exp expresion() throws ParseException {Exp exp;
    exp = e0();
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
}

  final public Exp e0() throws ParseException {Exp exp0, exp1;
    exp0 = e1();
    exp1 = fe0(exp0);
{if ("" != null) return exp1;}
    throw new Error("Missing return statement in function");
}

  final public Exp fe0(Exp exph) throws ParseException {Exp exp; Token op;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 48:{
      op = jj_consume_token(48);
      exp = e0();
{if ("" != null) return (Exp)sem.e_asig(exph, exp).ponFila(op.beginLine).ponCol(op.beginColumn);}
      break;
      }
    default:
      jj_la1[18] = jj_gen;
{if ("" != null) return exph;}
    }
    throw new Error("Missing return statement in function");
}

  final public Exp e1() throws ParseException {Exp exp0, exp1;
    exp0 = e2();
    exp1 = re1(exp0);
{if ("" != null) return exp1;}
    throw new Error("Missing return statement in function");
}

  final public Exp re1(Exp exph) throws ParseException {Token op; Exp exp0, exp1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:{
      op = op1();
      exp0 = e2();
      exp1 = re1((Exp)sem.mkop(op.image, exph, exp0).ponFila(op.beginLine).ponCol(op.beginColumn));
{if ("" != null) return exp1;}
      break;
      }
    default:
      jj_la1[19] = jj_gen;
{if ("" != null) return exph;}
    }
    throw new Error("Missing return statement in function");
}

  final public Exp e2() throws ParseException {Exp exp0, exp1, exp2;
    exp0 = e3();
    exp1 = fe2(exp0);
    exp2 = re2(exp1);
{if ("" != null) return exp2;}
    throw new Error("Missing return statement in function");
}

  final public Exp fe2(Exp exph) throws ParseException {Exp exp; Token op;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 49:{
      op = jj_consume_token(49);
      exp = e3();
{if ("" != null) return (Exp)sem.e_resta(exph, exp).ponFila(op.beginLine).ponCol(op.beginColumn);}
      break;
      }
    default:
      jj_la1[20] = jj_gen;
{if ("" != null) return exph;}
    }
    throw new Error("Missing return statement in function");
}

  final public Exp re2(Exp exph) throws ParseException {Exp exp0, exp1; Token op;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 50:{
      op = jj_consume_token(50);
      exp0 = e3();
      exp1 = re2((Exp)sem.e_suma(exph, exp0).ponFila(op.beginLine).ponCol(op.beginColumn));
{if ("" != null) return exp1;}
      break;
      }
    default:
      jj_la1[21] = jj_gen;
{if ("" != null) return exph;}
    }
    throw new Error("Missing return statement in function");
}

  final public Exp e3() throws ParseException {Exp exp0, exp1;
    exp0 = e4();
    exp1 = fe3(exp0);
{if ("" != null) return exp1;}
    throw new Error("Missing return statement in function");
}

  final public Exp fe3(Exp exph) throws ParseException {Exp exp; Token op;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case and:{
      op = jj_consume_token(and);
      exp = e3();
{if ("" != null) return (Exp)sem.e_and(exph, exp).ponFila(op.beginLine).ponCol(op.beginColumn);}
      break;
      }
    case or:{
      op = jj_consume_token(or);
      exp = e4();
{if ("" != null) return (Exp)sem.e_or(exph, exp).ponFila(op.beginLine).ponCol(op.beginColumn);}
      break;
      }
    default:
      jj_la1[22] = jj_gen;
{if ("" != null) return exph;}
    }
    throw new Error("Missing return statement in function");
}

  final public Exp e4() throws ParseException {Exp exp0, exp1;
    exp0 = e5();
    exp1 = re4(exp0);
{if ("" != null) return exp1;}
    throw new Error("Missing return statement in function");
}

  final public Exp re4(Exp exph) throws ParseException {Token op; Exp exp0, exp1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 57:
    case 58:
    case 59:{
      op = op4();
      exp0 = e5();
      exp1 = re4((Exp)sem.mkop(op.image, exph, exp0).ponFila(op.beginLine).ponCol(op.beginColumn));
{if ("" != null) return exp1;}
      break;
      }
    default:
      jj_la1[23] = jj_gen;
{if ("" != null) return exph;}
    }
    throw new Error("Missing return statement in function");
}

  final public Exp e5() throws ParseException {Token op; Exp exp;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case nulo:
    case t_true:
    case t_false:
    case iden:
    case lit_ent:
    case lit_real:
    case cadena:
    case 40:{
      exp = e6();
{if ("" != null) return exp;}
      break;
      }
    case not:
    case 49:{
      op = op5();
      exp = e5();
{if ("" != null) return (Exp)sem.mkunary(op.image, exp).ponFila(op.beginLine).ponCol(op.beginColumn);}
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public Exp e6() throws ParseException {Exp exp0, exp1;
    exp0 = e7();
    exp1 = re6(exp0);
{if ("" != null) return exp1;}
    throw new Error("Missing return statement in function");
}

  final public Exp re6(Exp exph) throws ParseException {Exp exp0, exp1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 44:
    case 46:
    case 60:{
      exp0 = op6(exph);
      exp1 = re6(exp0);
{if ("" != null) return exp1;}
      break;
      }
    default:
      jj_la1[25] = jj_gen;
{if ("" != null) return exph;}
    }
    throw new Error("Missing return statement in function");
}

  final public Exp e7() throws ParseException {Token id; Exp exp;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case lit_ent:{
      id = jj_consume_token(lit_ent);
{if ("" != null) return (Exp)sem.e_lit_ent(id.image).ponFila(id.beginLine).ponCol(id.beginColumn);}
      break;
      }
    case lit_real:{
      id = jj_consume_token(lit_real);
{if ("" != null) return (Exp)sem.e_lit_real(id.image).ponFila(id.beginLine).ponCol(id.beginColumn);}
      break;
      }
    case t_true:
    case t_false:{
      exp = booleano();
{if ("" != null) return exp;}
      break;
      }
    case cadena:{
      id = jj_consume_token(cadena);
{if ("" != null) return (Exp)sem.e_string(id.image).ponFila(id.beginLine).ponCol(id.beginColumn);}
      break;
      }
    case iden:{
      id = jj_consume_token(iden);
{if ("" != null) return (Exp)sem.e_iden(id.image).ponFila(id.beginLine).ponCol(id.beginColumn);}
      break;
      }
    case nulo:{
      id = jj_consume_token(nulo);
{if ("" != null) return (Exp)sem.e_null().ponFila(id.beginLine).ponCol(id.beginColumn);}
      break;
      }
    case 40:{
      exp = e8();
{if ("" != null) return exp;}
      break;
      }
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public Exp booleano() throws ParseException {Token id;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case t_true:{
      id = jj_consume_token(t_true);
{if ("" != null) return (Exp)sem.e_true().ponFila(id.beginLine).ponCol(id.beginColumn);}
      break;
      }
    case t_false:{
      id = jj_consume_token(t_false);
{if ("" != null) return (Exp)sem.e_false().ponFila(id.beginLine).ponCol(id.beginColumn);}
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public Exp e8() throws ParseException {Exp exp;
    jj_consume_token(40);
    exp = e0();
    jj_consume_token(41);
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
}

  final public Token op1() throws ParseException {Token op;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 51:{
      op = jj_consume_token(51);
{if ("" != null) return op;}
      break;
      }
    case 52:{
      op = jj_consume_token(52);
{if ("" != null) return op;}
      break;
      }
    case 53:{
      op = jj_consume_token(53);
{if ("" != null) return op;}
      break;
      }
    case 54:{
      op = jj_consume_token(54);
{if ("" != null) return op;}
      break;
      }
    case 55:{
      op = jj_consume_token(55);
{if ("" != null) return op;}
      break;
      }
    case 56:{
      op = jj_consume_token(56);
{if ("" != null) return op;}
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public Token op4() throws ParseException {Token op;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 57:{
      op = jj_consume_token(57);
{if ("" != null) return op;}
      break;
      }
    case 58:{
      op = jj_consume_token(58);
{if ("" != null) return op;}
      break;
      }
    case 59:{
      op = jj_consume_token(59);
{if ("" != null) return op;}
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public Token op5() throws ParseException {Token op;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 49:{
      op = jj_consume_token(49);
{if ("" != null) return op;}
      break;
      }
    case not:{
      op = jj_consume_token(not);
{if ("" != null) return op;}
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public Exp op6(Exp exph) throws ParseException {Exp exp; Token id;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 44:{
      id = jj_consume_token(44);
      exp = expresion();
      jj_consume_token(45);
{if ("" != null) return (Exp)sem.e_indexado(exph, exp).ponFila(id.beginLine).ponCol(id.beginColumn);}
      break;
      }
    case 60:{
      jj_consume_token(60);
      id = jj_consume_token(iden);
{if ("" != null) return (Exp)sem.e_campo(exph, id.image).ponFila(id.beginLine).ponCol(id.beginColumn);}
      break;
      }
    case 46:{
      id = jj_consume_token(46);
{if ("" != null) return (Exp)sem.e_puntero(exph).ponFila(id.beginLine).ponCol(id.beginColumn);}
      break;
      }
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  /** Generated Token Manager. */
  public ConstructorASTsTinyTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[32];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x1,0xa0888e00,0x0,0xa0888e00,0x80808e00,0x0,0x0,0x0,0x80808e00,0x80808e00,0x8e00,0x0,0x5f500000,0x0,0x5f500000,0x200000,0x80074000,0x0,0x0,0x0,0x0,0x0,0x3000,0x0,0x80074000,0x0,0x80070000,0x60000,0x0,0x0,0x4000,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x8,0x4000,0x80,0x4000,0x4000,0x400,0x800,0x1000,0x4000,0x0,0x0,0x400,0x8010,0x80,0x8010,0x0,0x20107,0x400,0x10000,0x1f80000,0x20000,0x40000,0x0,0xe000000,0x20107,0x10005000,0x107,0x0,0x1f80000,0xe000000,0x20000,0x10005000,};
	}

  /** Constructor with InputStream. */
  public ConstructorASTsTiny(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ConstructorASTsTiny(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new ConstructorASTsTinyTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ConstructorASTsTiny(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new ConstructorASTsTinyTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new ConstructorASTsTinyTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ConstructorASTsTiny(ConstructorASTsTinyTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ConstructorASTsTinyTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[61];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 32; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 61; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
