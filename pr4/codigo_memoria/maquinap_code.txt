var sub_pendientes = pila-vacia()


gen-code(prog(decs, intrs))
    recolecta-subs(decs)
    gen-code(intrs)
    emit stop()

    while not es-vacia(sub_pendientes)
        sub = cima(sub_pendientes)
        desapila(sub_pendientes)
        let sub = dec_proc(id, param, decs, Is) in 
            emit desapilad(sub.nivel)
            recolecta-subs(Decs)
            gen-code(Is)
            emit desactiva(sub.nivel, sub.tam)
            emit ir-ind()
        end let
    end while


recolecta-subs(si_decs(decs)):
    recolecta-subs(decs)

recolecta-subs(no_decs()):
    noop

recolecta-subs(mas_decs(decs, dec)):
    recolecta-subs(decs)
    recolecta-subs(dec)

recolecta-subs(una_dec(dec)):
    recolecta-subs(dec)

recolecta-subs(dec_var(tipo, id)):
    noop

recolecta-subs(dec_tipo(tipo, id)):
    noop

recolecta-subs(dec_proc(id, pforms, prog)):
    apila(sub_pendientes, dec_proc(id, pforms, prog))



gen-code(si_intrs(intrs)):
    gen-code(intrs)

gen-code(no_intrs()):
    noop

gen-code(mas_intrs(intrs, intr)):
    gen-code(intrs)
    gen-code(intr)

gen-code(una_intr(intr)):
    gen-code(intr)

gen-code(i_eval(exp)):
    gen-code(exp)
    emit desapila()  

gen-code(i_if(exp, prog, ielse)):
    
    gen-code(exp)
    if es-designador(exp):
        emit apila-ind
    
    ir-f($.sig) // si es falso saltamos al else
    gen-code(prog) //codigo del bloque if
    emit ir-a($.fin) // Hemos ejecutado el bloque del if, saltamos incondicionalmente al final (no se ejecuta else)
    gen-code(ielse) // codigo del bloque else

gen-code(i_while(exp, prog)):
    gen-code(exp)
    if es-designador(exp):
        emit apila-ind // apilamos el valor apuntado por el designador
    
    emit ir-f($.sig) // si es falso saltamos a sig (direccion de la instr que sigue al while)
    gen-code(prog)
    emit ir-a($.prim) // siempre se vuelve a la primera instrucción del while


gen-code(i_read(exp)):
    gen-code(exp) // dirección de lectura se deja en la cima
    emit read      // lee el valor y se guarda en la cima
    emit desapila-ind  //guarda la cima en la dirección de la subcima

gen-code(i_write(exp)):
    gen-code(exp)
    if es-designador(exp):
        emit apila-ind // apilamos el valor de la dirección


gen-code(i_nl()):
    emit nl  // no sé si hay que hacer algo

gen-code(i_new(exp)):
    gen-code(exp)  //Dirección de comienzo de la expresion
    emit alloc(tamaño(exp.tipo))     //reservamos tantas celdas como el tamaño del tipo de la expresión y apilamos la dir de comienzo
    emit desapila-ind  // en la cima tenemos el comienzo de la mem dinamica asignada, en la subcima la dir del propio puntero, guardamos en la subcima la cima

gen-code(i_delete(exp)):
    gen-code(exp)  // Direccion donde está el puntero
    emit apila-ind  // apilamos el valor apuntado por el puntero
    emit dealloc(tamaño(exp.tipo)) // liberamos la memoria de dicho tamaño




gen-code(e_asig(opnd0, opnd1)):
   gen_code(opnd0) 
   gen_code(opnd1) 

    if opnd0.tipo == t_real() and opnd1.tipo == t_int():
        if es-designador(opnd1):
            emit apila-ind //traemos el valor de opnd1 a la cima
            emit int2real //convertimos el valor a real
            emit desapila-ind //guardamos el valor convertido en la dirección de opnd0
    else:
        if es-designador(opnd1):
            emit copia(tamaño(opnd1.tipo)) // se va copiando celda a celda el valor 
        else: 
            emit desapila-ind // guarda en la dirección de opnd0 el valor de la cima (opnd1)
        




gen-code(e_comp(opnd0, opnd1)):
    gen-code(opnd0)
    if es-designador(opnd0):
        emit apila-ind //apilamos el valor apuntado por el designador
    
    gen-code(opnd1)
    if es-designador(opnd1):
        emit apila-ind //apilamos el valor apuntado por el designador

    emit comp    


gen-code(e_dist(opnd0, opnd1)):
    gen-code(opnd0)
    if es-designador(opnd0):
        emit apila-ind //apilamos el valor apuntado por el designador
    
    gen-code(opnd1)
    if es-designador(opnd1):
        emit apila-ind //apilamos el valor apuntado por el designador
    
    emit dist
    


gen-code(e_lt(opnd0, opnd1)):
    gen-code(opnd0)
    if es-designador(opnd0):
        emit apila-ind //apilamos el valor apuntado por el designador
    
    gen-code(opnd1)
    if es-designador(opnd1):
        emit apila-ind //apilamos el valor apuntado por el designador
    
    emit lt
    

gen-code(e_gt(opnd0, opnd1)):
    gen-code(opnd0)
    if es-designador(opnd0): 
        emit apila-ind //apilamos el valor apuntado por el designador
    
    gen-code(opnd1)
    if es-designador(opnd1):
        emit apila-ind //apilamos el valor apuntado por el designador

    emit gt
    
gen-code(e_leq(opnd0, opnd1)):
    gen-code(opnd0)
    if es-designador(opnd0):
        emit apila-ind  //apilamos el valor apuntado por el designador
    
    gen-code(opnd1)
    if es-designador(opnd1):
        emit apila-ind  //apilamos el valor apuntado por el designador
    
    emit leq
    

gen-code(e_geq(opnd0, opnd1)):
    gen-code(opnd0)
    if es-designador(opnd0):
        emit apila-ind //apilamos el valor apuntado por el designador
    
    gen-code(opnd1)
    if es-designador(opnd1):
        emit apila-ind  //apilamos el valor apuntado por el designador

    emit geq



gen-code(e_suma(opnd0, opnd1)):
    gen-code(opnd0)
    if es-designador(opnd0):
        emit apila-ind  //apilamos el valor apuntado por el designador
    
    gen-code(opnd1)
    if es-designador(opnd1):
        emit apila-ind  //apilamos el valor apuntado por el designador
    
    if opnd0.tipo == t_real() or opnd1.tipo == t_real():
        if opnd0.tipo == t_int():
            emit convertir_subcima_int_a_real
        if opnd1.tipo == t_int():
            emit convertir_cima_int_a_real
    
    emit suma

gen-code(e_resta(opnd0, opnd1)):
    gen-code(opnd0)
    if es-designador(opnd0):    
        emit apila-ind  //apilamos el valor apuntado por el designador
    
    gen-code(opnd1)
    if es-designador(opnd1):
        emit apila-ind  //apilamos el valor apuntado por el designador
    
    if opnd0.tipo == t_real() or opnd1.tipo == t_real():
        if opnd0.tipo == t_int():
            emit convertir_subcima_int_a_real
        if opnd1.tipo == t_int():
            emit convertir_cima_int_a_real
    
    emit resta

gen-code(e_mul(opnd0, opnd1)):
    gen-code(opnd0)
    if es-designador(opnd0):
        emit apila-ind  //apilamos el valor apuntado por el designador
    
    gen-code(opnd1)
    if es-designador(opnd1):
        emit apila-ind  //apilamos el valor apuntado por el designador
    

    if opnd0.tipo == t_real() or opnd1.tipo == t_real():
        if opnd0.tipo == t_int():
            emit convertir_subcima_int_a_real
        if opnd1.tipo == t_int():
            emit convertir_cima_int_a_real
    
    emit mul

gen-code(e_div(opnd0, opnd1)):
    gen-code(opnd0)
    if es-designador(opnd0):
        emit apila-ind  //apilamos el valor apuntado por el designador
    
    gen-code(opnd1)
    if es-designador(opnd1):
        emit apila-ind  //apilamos el valor apuntado por el designador
    

    if opnd0.tipo == t_real() or opnd1.tipo == t_real():
        if opnd0.tipo == t_int():
            emit convertir_subcima_int_a_real
        if opnd1.tipo == t_int():
            emit convertir_cima_int_a_real
    
    
    emit div

gen-code(e_porcentaje(opnd0, opnd1)):
    gen-code(opnd0)
    if es-designador(opnd0):
        emit apila-ind  //apilamos el valor apuntado por el designador
    
    gen-code(opnd1)
    if es-designador(opnd1):
        emit apila-ind  //apilamos el valor apuntado por el designador





gen-code(e_and(opnd0, opnd1)):
    

gen-code(e_or(opnd0, opnd1)):
  


gen-code(e_negativo(opnd)):
    gen-code(opnd)
    if es-designador(opnd):
        emit apila-ind //apilamos el valor apuntado por el designador
    
    //negarlo (no sé como hacerlo)

gen-code(e_negado(opnd)):
    gen-code(opnd)
    if es-designador(opnd):
        emit apila-ind
    
    //negarlo (no sé como hacerlo)


gen_code(i_call(id, preals)):
    proc = buscar_proc(id)

    //preparar el resgistro de activación
    emit activa(proc.nivel, proc.tam, dir_sig) //en la cima tenemos la dirección de comienzo del registro de activación

    id_pform = 0

    for preal in preals:
        pform = proc.pforms[id_pform]

        dup //duplicamos la cima (dir de comienzo de los datos del resgistro de activación)
        apila-int(preal.tam) //apilamos el tamaño del parámetro
        emit suma //tenemos en la cima la dirección de comienzo del parámetro
        gen-code(preal) //apilamos el valor/dir de comienzo del parámetro

        if pform.ref == no_ref():
            if es-designador(preal): // param formal por valor y real es designador
                emit copia(tamaño(pform.tipo)) //cima (dir apuntada preal) subcima (dir inicio del param en el registro activacion) se realiza copia del tamaño del tipo
            else:
                emit desapila-ind() // cima es el valor y subcima la dirección de comienzo del parámetro guardamos el valor en la dirección del param
        else:
            if es-designador(preal): // param formal por referencia y real es designador
                emit desapila-ind() // como ambos son punteros, en cima tenemos el valor apuntado por el preal, que se guarda en la dirección del pform 
            else:
                //ERROR el pform es designador y preal no lo es
    
        id_pform = id_pform + 1
    
    desapilad(proc.nivel) //desapilamos una direccion de la pila de evaluación (dirección inicio datos) se guarda en display de nivel proc.nivel

    gen-code(proc)

    emit desactiva(proc.nivel, proc.tam) //desactivamos el registro de activación dejamos en la cima la dirección de retorno
    emit ir-ind() //salto a la dirección de retorno del registro de activación


gen_code(e_indexado(opnd0, opnd1)):
    gen_code(opnd0) // obtenemos la dirección del array
    gen_code(opnd1) // obtenemos el índice
    emit apila-int(tamaño(opnd0.tipo)) //apilamos el tamaño del tipo del array
    emit mul //apilamos el desplazamiento del índice
    emit suma // a la dirección de comenzo del array le sumamos el desplazamiento del índice


gen_code(e_campo(opnd, id)):
    gen_code(opnd) //determinamos la dirección de E
    d = desplazamiento(id) //obtenemos el desplazamiento del campo id, se calcula en asignacion de espacio
    emit apila-int(d)
    emit suma // desplazamiento del campo + dirección de comienzo de E

gen_code(e_puntero(opnd)):
    gen_code(opnd) // determinamos dirección de E
    emit apila-ind //apilamos la dirección a la que apunta el puntero

