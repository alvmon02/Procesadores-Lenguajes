var sub_pendientes = pila_vacia()


gen_code(prog(decs, intrs))
    recolecta_subs(decs)
    gen_code(intrs)
    emit stop()

    while not es_vacia(sub_pendientes)
        sub = cima(sub_pendientes)
        desapila(sub_pendientes)
        let sub = dec_proc(id, param, decs, Is) in 
            emit desapilad(sub.nivel)
            recolecta_subs(Decs)
            gen_code(Is)
            emit desactiva(sub.nivel, sub.tam)
            emit ir_ind()
        end let
    end while


recolecta_subs(si_decs(decs)):
    recolecta_subs(decs)

recolecta_subs(no_decs()):
    noop

recolecta_subs(mas_decs(decs, dec)):
    recolecta_subs(decs)
    recolecta_subs(dec)

recolecta_subs(una_dec(dec)):
    recolecta_subs(dec)

recolecta_subs(dec_var(tipo, id)):
    noop

recolecta_subs(dec_tipo(tipo, id)):
    noop

recolecta_subs(dec_proc(id, pforms, prog)):
    apila(sub_pendientes, $)



gen_code(si_intrs(intrs)):
    gen_code(intrs)

gen_code(no_intrs()):
    noop

gen_code(mas_intrs(intrs, intr)):
    gen_code(intrs)
    gen_code(intr)

gen_code(una_intr(intr)):
    gen_code(intr)

gen_code(i_eval(exp)):
    gen_code(exp)
    emit desapila()  // desechar el valor

gen_code(i_if(exp, prog, ielse)):
    
    gen_code(exp)
    gen_acc_valor(exp)
    
    ir_f($.sig) // si es falso saltamos al else
    gen_code_bloque(prog) //codigo del bloque if
    emit ir_a($.fin) // Hemos ejecutado el bloque del if, saltamos incondicionalmente al final (no se ejecuta else)
    gen_code(ielse) // codigo del bloque else

gen_code(i_while(exp, prog)):
    gen_code(exp)
    gen_acc_valor(exp)
    
    emit ir_f($.sig) // si es falso saltamos a sig (direccion de la instr que sigue al while)
    gen_code_bloque(prog)
    emit ir_a($.prim) // siempre se vuelve a la primera instrucción del while


gen_code(i_read(exp)):
    gen_code(exp) // dirección de lectura se deja en la cima
    emit read      // lee el valor y se guarda en la cima
    emit desapila_ind  //guarda la cima en la dirección de la subcima

gen_code(i_write(exp)):
    gen_code(exp)
    gen_acc_valor(exp)
    emit write


gen_code(i_nl()):
    emit nl  // no sé si hay que hacer algo

gen_code(i_new(exp)):
    gen_code(exp)  //Dirección de comienzo de la expresion
    emit alloc(exp.tipo.tipo.tamaño)     //reservamos tantas celdas como el tamaño del tipo de la expresión y apilamos la dir de comienzo
    emit desapila_ind  // en la cima tenemos el comienzo de la mem dinamica asignada, en la subcima la dir del propio puntero, guardamos en la subcima la cima

gen_code(i_delete(exp)):
    gen_code(exp)  // Direccion donde está el puntero
    emit apila_ind  // apilamos el valor apuntado por el puntero
    emit dealloc(exp.tipo.tipo.tamaño) // liberamos la memoria de dicho tamaño // tipo.tipo porque es tipo puntero



gen_code(e_asig(opnd0, opnd1)):
   gen_code(opnd0) 
   gen_code(opnd1) 

    if opnd0.tipo == t_real() and opnd1.tipo == t_int():
        gen_acc_valor(opnd1)
            
        emit int2real //convertimos el valor a real
        emit desapila_ind //guardamos el valor convertido en la dirección de opnd0
    else:
        if es_designador(opnd1):
            emit copia(tamaño(opnd1.tipo)) // se va copiando celda a celda el valor 
        else: 
            emit desapila_ind // guarda en la dirección de opnd0 el valor de la cima (opnd1)

gen_code(e_comp(opnd0, opnd1)):
    gen_code(opnd0)
    gen_acc_valor(opnd0)

    gen_code(opnd1)
    gen_acc_valor(opnd1)

    emit comp

gen_code(e_dist(opnd0, opnd1)):
    gen_code(opnd0)
    gen_acc_valor(opnd0)
    
    gen_code(opnd1)
    gen_acc_valor(opnd1)
    
    emit dist

gen_code(e_lt(opnd0, opnd1)):
    gen_code(opnd0)
    gen_acc_valor(opnd0)
    
    gen_code(opnd1)
    gen_acc_valor(opnd1)
    
    emit lt

gen_code(e_gt(opnd0, opnd1)):
    gen_code(opnd0)
    gen_acc_valor(opnd0)
    
    gen_code(opnd1)
    gen_acc_valor(opnd1)

    emit gt

gen_code(e_leq(opnd0, opnd1)):
    gen_code(opnd0)
    gen_acc_valor(opnd0)
    
    gen_code(opnd1)
    gen_acc_valor(opnd1)
    
    emit leq

gen_code(e_geq(opnd0, opnd1)):
    gen_code(opnd0)
    gen_acc_valor(opnd0)
    
    gen_code(opnd1)
    gen_acc_valor(opnd1)

    emit geq

gen_code(e_suma(opnd0, opnd1)):
    gen_code(opnd0)
    gen_acc_valor(opnd0)
    
    if opnd0.tipo == t_int() or opnd1.tipo == t_real():
        emit int2real

    gen_code(opnd1)
    gen_acc_valor(opnd1)
    
    if opnd0.tipo == t_real() or opnd1.tipo == t_int():
        emit int2real
    
    emit suma

gen_code(e_resta(opnd0, opnd1)):
    gen_code(opnd0)
    gen_acc_valor(opnd0)
    
    if opnd0.tipo == t_int() or opnd1.tipo == t_real():
        emit int2real

    gen_code(opnd1)
    gen_acc_valor(opnd1)
    
    if opnd0.tipo == t_real() and opnd1.tipo == t_int():
        emit int2real
    
    emit resta

gen_code(e_mul(opnd0, opnd1)):
    gen_code(opnd0)
    gen_acc_valor(opnd0)

    if opnd0.tipo == t_int() or opnd1.tipo == t_real():
        emit int2real

    gen_code(opnd1)
    gen_acc_valor(opnd1)
    
    if opnd0.tipo == t_real() and opnd1.tipo == t_int():
        emit int2real
    
    emit mul

gen_code(e_div(opnd0, opnd1)):
    gen_code(opnd0)
    gen_acc_valor(opnd0)

    if opnd0.tipo == t_int() or opnd1.tipo == t_real():
        emit int2real
    
    gen_code(opnd1)
    gen_acc_valor(opnd1)
    
    if opnd0.tipo == t_real() and opnd1.tipo == t_int():
        emit int2real
    
    emit div

gen_code(e_porcentaje(opnd0, opnd1)):
    gen_code(opnd0)
    gen_acc_valor(opnd0)
    
    gen_code(opnd1)
    gen_acc_valor(opnd1)
    
    emit mod

gen_code(e_and(opnd0, opnd1)):
    gen_code(opnd0)
    gen_acc_valor(opnd0)
    
    gen_code(opnd1)
    gen_acc_valor(opnd1)
    
    emit and

gen_code(e_or(opnd0, opnd1)):
    gen_code(opnd0)
    gen_acc_valor(opnd0)
    
    gen_code(opnd1)
    gen_acc_valor(opnd1)
    
    emit or

gen_code(e_negativo(opnd)):
    gen_code(opnd)
    gen_acc_valor(opnd)
    
    emit neg //negamos el valor de la cima

gen_code(e_negado(opnd)):
    gen_code(opnd)
    gen_acc_valor(opnd)
    
    emit not //negamos el valor de la cima

gen_code(i_call(id, preals)): //version mejorada abajo del todo
    proc = $.vinculo

    //preparar el resgistro de activación
    emit activa(proc.nivel, proc.tam, $.sig) //en la cima tenemos la dirección de comienzo del registro de activación

    id_pform = 0

    for preal in preals:
        pform = proc.pforms[id_pform]

        emit dup //duplicamos la cima (dir de comienzo de los datos del resgistro de activación)
        apila_int(pform.dir) //apilamos el tamaño del parámetro
        emit suma //tenemos en la cima la dirección de comienzo del parámetro
        gen_code(preal) //apilamos el valor/dir de comienzo del parámetro

        if pform.ref == no_ref():
            if es_designador(preal): // param formal por valor y real es designador
                emit copia(pform.tipo.tamaño) //cima (dir apuntada preal) subcima (dir inicio del param en el registro activacion) se realiza copia del tamaño del tipo
            else:
                emit desapila_ind() // cima es el valor y subcima la dirección de comienzo del parámetro guardamos el valor en la dirección del param
        else:
            emit desapila_ind() // como ambos son punteros, en cima tenemos el valor apuntado por el preal, que se guarda en la dirección del pform 
    
        id_pform = id_pform + 1
    ir_a(proc.prim)

gen_code(i_prog(prog)):
    gen_code_bloque(prog)

gen_code_bloque(prog(decs, intrs)):
    recolecta_subs(decs)
    gen_code(intrs)

gen_code(e_indexado(opnd0, opnd1)):
    gen_code(opnd0) // obtenemos la dirección del array
    gen_code(opnd1) // obtenemos el índice
    emit apila_int(opnd0.tipo.tipo.tamaño) //apilamos el tamaño del tipo del array
    emit mul //apilamos el desplazamiento del índice
    emit suma // a la dirección de comenzo del array le sumamos el desplazamiento del índice

// TODO
gen_code(e_campo(opnd, id)):
    gen_code(opnd) //determinamos la dirección de E
    d = desplazamiento(id) //obtenemos el desplazamiento del campo id, se calcula en asignacion de espacio
    emit apila_int(d)
    emit suma // desplazamiento del campo + dirección de comienzo de E

gen_code(e_puntero(opnd)):
    gen_code(opnd) // determinamos dirección de E
    emit apila_ind //apilamos la dirección a la que apunta el puntero

gen_code(e_lit_ent(num)):
    emit apila_int(num) //apilamos el literal entero

gen_code(e_lit_real(num)):
    emit apila_real(num) //apilamos el literal real

gen_code(e_true()):
    emit apila_bool(true) //apilamos el literal booleano true

gen_code(e_false()):
    emit apila_bool(false) //apilamos el literal booleano false

gen_code(e_string(string))
    emit apila_string(string) //apilamos el literal string

gen_code(e_null()):
    emit apila_int(-1) //apilamos el literal entero _1 (null)

gen_code(e_iden(id)):
    gen_acc_id($.vinculo)

gen_acc_id(dec_var(tipo, id)):
    if $.nivel == 0: // variable global
        emit apila_int($.vinculo.dir) //apilamos la dirección de la variable
    else:
        emit apilad($.nivel) //apilamos el display de nivel $.nivel
        emit apila_int($.vinculo.dir) //apilamos la dirección de la variable
        emit suma //apilamos la dirección de la variable (display + dir var)
    end if

gen_acc_id(pform(tipo, ref, id)):
    emit apilad($.nivel) //apilamos el display de nivel $.nivel
    emit apila_int($.vinculo.dir) //apilamos la dirección de la variable
    emit suma //apilamos la dirección de la variable (display + dir var)
    if ref == si_ref() then:
        emit apila_ind()
    end if

gen_acc_valor(exp):
    if es_designador(exp):
        emit apila_ind //apilamos el valor apuntado por el designador


